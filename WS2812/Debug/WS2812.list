
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004378  08004378  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004378  08004378  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00005378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0000537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004380  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  2000000c  0800438c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800438c  00006450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000893a  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2f  00000000  00000000  0000e96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  000105a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c17  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88a  00000000  00000000  00029407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088528  00000000  00000000  00035c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be1b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  000be1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c0ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f6c 	.word	0x08003f6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003f6c 	.word	0x08003f6c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_DMA_Init+0x38>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <MX_DMA_Init+0x38>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_DMA_Init+0x38>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2010      	movs	r0, #16
 80007a4:	f000 fea5 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007a8:	2010      	movs	r0, #16
 80007aa:	f000 febe 	bl	800152a <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0320 	and.w	r3, r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <MX_GPIO_Init+0x58>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_GPIO_Init+0x58>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000

08000818 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fd0b 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f843 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f7ff ffc9 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 800082a:	f7ff ffa9 	bl	8000780 <MX_DMA_Init>
  MX_TIM3_Init();
 800082e:	f000 f8f7 	bl	8000a20 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 渐变更新颜色，演示2次
    for (int i = 0; i < 2; i++)
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e024      	b.n	8000882 <main+0x6a>
    {
      ws2812_set_all(0xFFFFFF); // 纯白色
 8000838:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800083c:	f000 fbba 	bl	8000fb4 <ws2812_set_all>
      ws2812_gradient(200, 3);
 8000840:	2103      	movs	r1, #3
 8000842:	20c8      	movs	r0, #200	@ 0xc8
 8000844:	f000 fa7c 	bl	8000d40 <ws2812_gradient>
      HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084c:	f000 fd56 	bl	80012fc <HAL_Delay>

      ws2812_set_all(0x20B2AA); // 浅海洋绿
 8000850:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <main+0x8c>)
 8000852:	f000 fbaf 	bl	8000fb4 <ws2812_set_all>
      ws2812_gradient(200, 3);
 8000856:	2103      	movs	r1, #3
 8000858:	20c8      	movs	r0, #200	@ 0xc8
 800085a:	f000 fa71 	bl	8000d40 <ws2812_gradient>
      HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000862:	f000 fd4b 	bl	80012fc <HAL_Delay>

      ws2812_set_all(0xFFD700); // 金色
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <main+0x90>)
 8000868:	f000 fba4 	bl	8000fb4 <ws2812_set_all>
      ws2812_gradient(200, 3);
 800086c:	2103      	movs	r1, #3
 800086e:	20c8      	movs	r0, #200	@ 0xc8
 8000870:	f000 fa66 	bl	8000d40 <ws2812_gradient>
      HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000878:	f000 fd40 	bl	80012fc <HAL_Delay>
    for (int i = 0; i < 2; i++)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b01      	cmp	r3, #1
 8000886:	ddd7      	ble.n	8000838 <main+0x20>

      // 更多颜色：https://www.w3schools.com/colors/colors_picker.asp
    }

    // 彩虹效果，演示5次
    for (int i = 0; i < 5; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	e006      	b.n	800089c <main+0x84>
    {
      rainbow_effect(255, 70);
 800088e:	2146      	movs	r1, #70	@ 0x46
 8000890:	20ff      	movs	r0, #255	@ 0xff
 8000892:	f000 fc6d 	bl	8001170 <rainbow_effect>
    for (int i = 0; i < 5; i++)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	ddf5      	ble.n	800088e <main+0x76>
    for (int i = 0; i < 2; i++)
 80008a2:	e7c6      	b.n	8000832 <main+0x1a>
 80008a4:	0020b2aa 	.word	0x0020b2aa
 80008a8:	00ffd700 	.word	0x00ffd700

080008ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	@ 0x40
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2228      	movs	r2, #40	@ 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fd62 	bl	8003384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f9a5 	bl	8001c44 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000900:	f000 f819 	bl	8000936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000904:	230f      	movs	r3, #15
 8000906:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fc12 	bl	8002148 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800092a:	f000 f804 	bl	8000936 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3740      	adds	r7, #64	@ 0x40
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
}
 800093c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <HAL_MspInit+0x5c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <HAL_MspInit+0x5c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_MspInit+0x60>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_MspInit+0x60>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 fc64 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <DMA1_Channel6_IRQHandler+0x10>)
 8000a06:	f000 fe65 	bl	80016d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000070 	.word	0x20000070

08000a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a52:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a64:	2259      	movs	r2, #89	@ 0x59
 8000a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a74:	4823      	ldr	r0, [pc, #140]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a76:	f001 fcc3 	bl	8002400 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000a80:	f7ff ff59 	bl	8000936 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a92:	f001 ffc1 	bl	8002a18 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000a9c:	f7ff ff4b 	bl	8000936 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000aa2:	f001 fcfc 	bl	800249e <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000aac:	f7ff ff43 	bl	8000936 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000ac0:	f002 fc02 	bl	80032c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000aca:	f7ff ff34 	bl	8000936 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000ae6:	f001 fed5 	bl	8002894 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000af0:	f7ff ff21 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000af6:	f000 f859 	bl	8000bac <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	@ 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000028 	.word	0x20000028
 8000b08:	40000400 	.word	0x40000400

08000b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <HAL_TIM_Base_MspInit+0x90>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d139      	bne.n	8000b92 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x94>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x94>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x94>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <HAL_TIM_Base_MspInit+0x9c>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b6c:	f000 fcf8 	bl	8001560 <HAL_DMA_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b76:	f7ff fede 	bl	8000936 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b80:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x98>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	20000070 	.word	0x20000070
 8000ba8:	4002006c 	.word	0x4002006c

08000bac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a18      	ldr	r2, [pc, #96]	@ (8000c28 <HAL_TIM_MspPostInit+0x7c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d129      	bne.n	8000c20 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_TIM_MspPostInit+0x80>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <HAL_TIM_MspPostInit+0x80>)
 8000bd2:	f043 0308 	orr.w	r3, r3, #8
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_TIM_MspPostInit+0x80>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be4:	2310      	movs	r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <HAL_TIM_MspPostInit+0x84>)
 8000bf8:	f000 fea0 	bl	800193c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_TIM_MspPostInit+0x88>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <HAL_TIM_MspPostInit+0x88>)
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40010000 	.word	0x40010000

08000c38 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e060      	b.n	8000d06 <ws2812_update+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4936      	ldr	r1, [pc, #216]	@ (8000d24 <ws2812_update+0xec>)
 8000c4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c4e:	4936      	ldr	r1, [pc, #216]	@ (8000d28 <ws2812_update+0xf0>)
 8000c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4a34      	ldr	r2, [pc, #208]	@ (8000d28 <ws2812_update+0xf0>)
 8000c58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c5c:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <ws2812_update+0xf4>)
 8000c5e:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <ws2812_update+0xf8>)
 8000c60:	4934      	ldr	r1, [pc, #208]	@ (8000d34 <ws2812_update+0xfc>)
 8000c62:	f000 f9d6 	bl	8001012 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	33c8      	adds	r3, #200	@ 0xc8
 8000c72:	4a31      	ldr	r2, [pc, #196]	@ (8000d38 <ws2812_update+0x100>)
 8000c74:	4413      	add	r3, r2
 8000c76:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71bb      	strb	r3, [r7, #6]
 8000c7c:	e03d      	b.n	8000cfa <ws2812_update+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <ws2812_update+0xfc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <ws2812_update+0x5e>
 8000c92:	2142      	movs	r1, #66	@ 0x42
 8000c94:	e000      	b.n	8000c98 <ws2812_update+0x60>
 8000c96:	2115      	movs	r1, #21
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <ws2812_update+0xf8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <ws2812_update+0x84>
 8000cb8:	2142      	movs	r1, #66	@ 0x42
 8000cba:	e000      	b.n	8000cbe <ws2812_update+0x86>
 8000cbc:	2115      	movs	r1, #21
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	460a      	mov	r2, r1
 8000cca:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <ws2812_update+0xf4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <ws2812_update+0xac>
 8000ce0:	2142      	movs	r1, #66	@ 0x42
 8000ce2:	e000      	b.n	8000ce6 <ws2812_update+0xae>
 8000ce4:	2115      	movs	r1, #21
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	3310      	adds	r3, #16
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	71bb      	strb	r3, [r7, #6]
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	d9be      	bls.n	8000c7e <ws2812_update+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	3301      	adds	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	d99b      	bls.n	8000c44 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)ws2812_data,
 8000d0c:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8000d10:	4a09      	ldr	r2, [pc, #36]	@ (8000d38 <ws2812_update+0x100>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <ws2812_update+0x104>)
 8000d16:	f001 fc1b 	bl	8002550 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000b4 	.word	0x200000b4
 8000d28:	200000dc 	.word	0x200000dc
 8000d2c:	20000106 	.word	0x20000106
 8000d30:	20000105 	.word	0x20000105
 8000d34:	20000104 	.word	0x20000104
 8000d38:	20000108 	.word	0x20000108
 8000d3c:	20000028 	.word	0x20000028

08000d40 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	75fb      	strb	r3, [r7, #23]
 8000d54:	e068      	b.n	8000e28 <ws2812_gradient+0xe8>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	4a75      	ldr	r2, [pc, #468]	@ (8000f30 <ws2812_gradient+0x1f0>)
 8000d5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	4a74      	ldr	r2, [pc, #464]	@ (8000f34 <ws2812_gradient+0x1f4>)
 8000d62:	1899      	adds	r1, r3, r2
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	4a74      	ldr	r2, [pc, #464]	@ (8000f38 <ws2812_gradient+0x1f8>)
 8000d68:	441a      	add	r2, r3
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	4c73      	ldr	r4, [pc, #460]	@ (8000f3c <ws2812_gradient+0x1fc>)
 8000d6e:	4423      	add	r3, r4
 8000d70:	f000 f94f 	bl	8001012 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	4a72      	ldr	r2, [pc, #456]	@ (8000f40 <ws2812_gradient+0x200>)
 8000d78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7c:	f107 030f 	add.w	r3, r7, #15
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0111 	add.w	r1, r7, #17
 8000d88:	f000 f943 	bl	8001012 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 8000d8c:	7c7b      	ldrb	r3, [r7, #17]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	4a68      	ldr	r2, [pc, #416]	@ (8000f34 <ws2812_gradient+0x1f4>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa91 	bl	80002c0 <__aeabi_i2f>
 8000d9e:	4605      	mov	r5, r0
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa8c 	bl	80002c0 <__aeabi_i2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	7dfc      	ldrb	r4, [r7, #23]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4628      	mov	r0, r5
 8000db0:	f7ff fb8e 	bl	80004d0 <__aeabi_fdiv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b62      	ldr	r3, [pc, #392]	@ (8000f44 <ws2812_gradient+0x204>)
 8000dba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8000dbe:	7c3b      	ldrb	r3, [r7, #16]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8000f38 <ws2812_gradient+0x1f8>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	1acb      	subs	r3, r1, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa78 	bl	80002c0 <__aeabi_i2f>
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa73 	bl	80002c0 <__aeabi_i2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	7dfc      	ldrb	r4, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff fb75 	bl	80004d0 <__aeabi_fdiv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b57      	ldr	r3, [pc, #348]	@ (8000f48 <ws2812_gradient+0x208>)
 8000dec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4619      	mov	r1, r3
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	4a51      	ldr	r2, [pc, #324]	@ (8000f3c <ws2812_gradient+0x1fc>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa5f 	bl	80002c0 <__aeabi_i2f>
 8000e02:	4605      	mov	r5, r0
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fa5a 	bl	80002c0 <__aeabi_i2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	7dfc      	ldrb	r4, [r7, #23]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4628      	mov	r0, r5
 8000e14:	f7ff fb5c 	bl	80004d0 <__aeabi_fdiv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f4c <ws2812_gradient+0x20c>)
 8000e1e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	3301      	adds	r3, #1
 8000e26:	75fb      	strb	r3, [r7, #23]
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b09      	cmp	r3, #9
 8000e2c:	d993      	bls.n	8000d56 <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8000e2e:	2301      	movs	r3, #1
 8000e30:	75bb      	strb	r3, [r7, #22]
 8000e32:	e074      	b.n	8000f1e <ws2812_gradient+0x1de>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	757b      	strb	r3, [r7, #21]
 8000e38:	e065      	b.n	8000f06 <ws2812_gradient+0x1c6>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8000e3a:	7d7b      	ldrb	r3, [r7, #21]
 8000e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f34 <ws2812_gradient+0x1f4>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fa3d 	bl	80002c0 <__aeabi_i2f>
 8000e46:	4605      	mov	r5, r0
 8000e48:	7d7b      	ldrb	r3, [r7, #21]
 8000e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f44 <ws2812_gradient+0x204>)
 8000e4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e50:	7dbb      	ldrb	r3, [r7, #22]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fa34 	bl	80002c0 <__aeabi_i2f>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fa83 	bl	8000368 <__aeabi_fmul>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4628      	mov	r0, r5
 8000e68:	f7ff f976 	bl	8000158 <__addsf3>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc66 	bl	8000740 <__aeabi_f2uiz>
 8000e74:	4603      	mov	r3, r0
 8000e76:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8000e78:	7d7b      	ldrb	r3, [r7, #21]
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <ws2812_gradient+0x1f8>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fa1e 	bl	80002c0 <__aeabi_i2f>
 8000e84:	4605      	mov	r5, r0
 8000e86:	7d7b      	ldrb	r3, [r7, #21]
 8000e88:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <ws2812_gradient+0x208>)
 8000e8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e8e:	7dbb      	ldrb	r3, [r7, #22]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa15 	bl	80002c0 <__aeabi_i2f>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fa64 	bl	8000368 <__aeabi_fmul>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f7ff f957 	bl	8000158 <__addsf3>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc47 	bl	8000740 <__aeabi_f2uiz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8000eb6:	7d7b      	ldrb	r3, [r7, #21]
 8000eb8:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <ws2812_gradient+0x1fc>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f9ff 	bl	80002c0 <__aeabi_i2f>
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	7d7b      	ldrb	r3, [r7, #21]
 8000ec6:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <ws2812_gradient+0x20c>)
 8000ec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ecc:	7dbb      	ldrb	r3, [r7, #22]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f9f6 	bl	80002c0 <__aeabi_i2f>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f7ff fa45 	bl	8000368 <__aeabi_fmul>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f7ff f938 	bl	8000158 <__addsf3>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc28 	bl	8000740 <__aeabi_f2uiz>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8000ef4:	7cbb      	ldrb	r3, [r7, #18]
 8000ef6:	7cfa      	ldrb	r2, [r7, #19]
 8000ef8:	7d39      	ldrb	r1, [r7, #20]
 8000efa:	7d78      	ldrb	r0, [r7, #21]
 8000efc:	f000 f828 	bl	8000f50 <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000f00:	7d7b      	ldrb	r3, [r7, #21]
 8000f02:	3301      	adds	r3, #1
 8000f04:	757b      	strb	r3, [r7, #21]
 8000f06:	7d7b      	ldrb	r3, [r7, #21]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d996      	bls.n	8000e3a <ws2812_gradient+0xfa>
		}

		ws2812_update();
 8000f0c:	f7ff fe94 	bl	8000c38 <ws2812_update>
		HAL_Delay(delay_ms);
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9f2 	bl	80012fc <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8000f18:	7dbb      	ldrb	r3, [r7, #22]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	75bb      	strb	r3, [r7, #22]
 8000f1e:	7dba      	ldrb	r2, [r7, #22]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d986      	bls.n	8000e34 <ws2812_gradient+0xf4>
	}
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	200000dc 	.word	0x200000dc
 8000f34:	200003b0 	.word	0x200003b0
 8000f38:	200003bc 	.word	0x200003bc
 8000f3c:	200003c8 	.word	0x200003c8
 8000f40:	200000b4 	.word	0x200000b4
 8000f44:	200003d4 	.word	0x200003d4
 8000f48:	200003fc 	.word	0x200003fc
 8000f4c:	20000424 	.word	0x20000424

08000f50 <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4603      	mov	r3, r0
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	717b      	strb	r3, [r7, #5]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 8000f6e:	79fc      	ldrb	r4, [r7, #7]
 8000f70:	793a      	ldrb	r2, [r7, #4]
 8000f72:	7979      	ldrb	r1, [r7, #5]
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f836 	bl	8000fe8 <rgb_to_color>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a03      	ldr	r2, [pc, #12]	@ (8000f8c <ws2812_set_rgb+0x3c>)
 8000f80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	200000b4 	.word	0x200000b4

08000f90 <ws2812_set>:
 * @brief  设置LED颜色（24bit颜色格式）
 * @param  led_id: LED编号（学习板一共有10个LED，编号范围0-9）
 * @param  color: 24bit颜色
 */
void ws2812_set(uint8_t led_id, uint32_t color)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
	ws2812_color[led_id] = color;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4904      	ldr	r1, [pc, #16]	@ (8000fb0 <ws2812_set+0x20>)
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	200000b4 	.word	0x200000b4

08000fb4 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e007      	b.n	8000fd2 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <ws2812_set_all+0x30>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d9f4      	bls.n	8000fc2 <ws2812_set_all+0xe>
	}
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	200000b4 	.word	0x200000b4

08000fe8 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	431a      	orrs	r2, r3
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	4313      	orrs	r3, r2
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	0c1b      	lsrs	r3, r3, #16
 8001024:	b2da      	uxtb	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b2da      	uxtb	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <rainbow_color>:

// =============== 以下为额外的效果演示函数 ================

uint32_t rainbow_color(float frequency, int phase, int center, int width)
{
 8001046:	b5b0      	push	{r4, r5, r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
	float r = sinf(frequency * phase + 0) * width + center;
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff f933 	bl	80002c0 <__aeabi_i2f>
 800105a:	4603      	mov	r3, r0
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f982 	bl	8000368 <__aeabi_fmul>
 8001064:	4603      	mov	r3, r0
 8001066:	f04f 0100 	mov.w	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f874 	bl	8000158 <__addsf3>
 8001070:	4603      	mov	r3, r0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f9b2 	bl	80033dc <sinf>
 8001078:	4604      	mov	r4, r0
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff f920 	bl	80002c0 <__aeabi_i2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff f96f 	bl	8000368 <__aeabi_fmul>
 800108a:	4603      	mov	r3, r0
 800108c:	461c      	mov	r4, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f916 	bl	80002c0 <__aeabi_i2f>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff f85d 	bl	8000158 <__addsf3>
 800109e:	4603      	mov	r3, r0
 80010a0:	61fb      	str	r3, [r7, #28]
	float g = sinf(frequency * phase + 2) * width + center;
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f7ff f90c 	bl	80002c0 <__aeabi_i2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f95b 	bl	8000368 <__aeabi_fmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f84d 	bl	8000158 <__addsf3>
 80010be:	4603      	mov	r3, r0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f98b 	bl	80033dc <sinf>
 80010c6:	4604      	mov	r4, r0
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff f8f9 	bl	80002c0 <__aeabi_i2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff f948 	bl	8000368 <__aeabi_fmul>
 80010d8:	4603      	mov	r3, r0
 80010da:	461c      	mov	r4, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff f8ef 	bl	80002c0 <__aeabi_i2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff f836 	bl	8000158 <__addsf3>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61bb      	str	r3, [r7, #24]
	float b = sinf(frequency * phase + 4) * width + center;
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff f8e5 	bl	80002c0 <__aeabi_i2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f934 	bl	8000368 <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f826 	bl	8000158 <__addsf3>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f964 	bl	80033dc <sinf>
 8001114:	4604      	mov	r4, r0
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff f8d2 	bl	80002c0 <__aeabi_i2f>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff f921 	bl	8000368 <__aeabi_fmul>
 8001126:	4603      	mov	r3, r0
 8001128:	461c      	mov	r4, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f8c8 	bl	80002c0 <__aeabi_i2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4619      	mov	r1, r3
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff f80f 	bl	8000158 <__addsf3>
 800113a:	4603      	mov	r3, r0
 800113c:	617b      	str	r3, [r7, #20]
	return rgb_to_color((uint8_t)r, (uint8_t)g, (uint8_t)b);
 800113e:	69f8      	ldr	r0, [r7, #28]
 8001140:	f7ff fafe 	bl	8000740 <__aeabi_f2uiz>
 8001144:	4603      	mov	r3, r0
 8001146:	b2dc      	uxtb	r4, r3
 8001148:	69b8      	ldr	r0, [r7, #24]
 800114a:	f7ff faf9 	bl	8000740 <__aeabi_f2uiz>
 800114e:	4603      	mov	r3, r0
 8001150:	b2dd      	uxtb	r5, r3
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff faf4 	bl	8000740 <__aeabi_f2uiz>
 8001158:	4603      	mov	r3, r0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	4629      	mov	r1, r5
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff ff41 	bl	8000fe8 <rgb_to_color>
 8001166:	4603      	mov	r3, r0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}

08001170 <rainbow_effect>:

void rainbow_effect(uint8_t steps, uint16_t delay_ms)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	80bb      	strh	r3, [r7, #4]
	float frequency = 0.1;
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <rainbow_effect+0x78>)
 8001182:	617b      	str	r3, [r7, #20]
	int center = 128;
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	613b      	str	r3, [r7, #16]
	int width = 127;
 8001188:	237f      	movs	r3, #127	@ 0x7f
 800118a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < steps; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	e020      	b.n	80011d4 <rainbow_effect+0x64>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001192:	2300      	movs	r3, #0
 8001194:	76fb      	strb	r3, [r7, #27]
 8001196:	e011      	b.n	80011bc <rainbow_effect+0x4c>
		{
			uint32_t color = rainbow_color(frequency, i + led_id * 2, center, width);
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	005a      	lsls	r2, r3, #1
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	18d1      	adds	r1, r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ff4e 	bl	8001046 <rainbow_color>
 80011aa:	60b8      	str	r0, [r7, #8]
			ws2812_set(led_id, color);
 80011ac:	7efb      	ldrb	r3, [r7, #27]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff feed 	bl	8000f90 <ws2812_set>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80011b6:	7efb      	ldrb	r3, [r7, #27]
 80011b8:	3301      	adds	r3, #1
 80011ba:	76fb      	strb	r3, [r7, #27]
 80011bc:	7efb      	ldrb	r3, [r7, #27]
 80011be:	2b09      	cmp	r3, #9
 80011c0:	d9ea      	bls.n	8001198 <rainbow_effect+0x28>
		}
		ws2812_update();
 80011c2:	f7ff fd39 	bl	8000c38 <ws2812_update>
		HAL_Delay(delay_ms);
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f897 	bl	80012fc <HAL_Delay>
	for (int i = 0; i < steps; i++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbda      	blt.n	8001192 <rainbow_effect+0x22>
	}
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	3dcccccd 	.word	0x3dcccccd

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff fc12 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011f2:	490c      	ldr	r1, [pc, #48]	@ (8001224 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001208:	4c09      	ldr	r4, [pc, #36]	@ (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 f8bd 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fafd 	bl	8000818 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001228:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 800122c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001230:	20000450 	.word	0x20000450

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f947 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fb76 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f95f 	bl	8001546 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f927 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	2000044c 	.word	0x2000044c

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000044c 	.word	0x2000044c

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4906      	ldr	r1, [pc, #24]	@ (80013dc <__NVIC_EnableIRQ+0x34>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2d 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff42 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff35 	bl	80013a8 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e043      	b.n	80015fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_DMA_Init+0xa8>)
 800157e:	4413      	add	r3, r2
 8001580:	4a22      	ldr	r2, [pc, #136]	@ (800160c <HAL_DMA_Init+0xac>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1f      	ldr	r2, [pc, #124]	@ (8001610 <HAL_DMA_Init+0xb0>)
 8001592:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	bffdfff8 	.word	0xbffdfff8
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_DMA_Start_IT+0x20>
 8001630:	2302      	movs	r3, #2
 8001632:	e04b      	b.n	80016cc <HAL_DMA_Start_IT+0xb8>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d13a      	bne.n	80016be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f937 	bl	80018e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 020e 	orr.w	r2, r2, #14
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e00f      	b.n	80016ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 020a 	orr.w	r2, r2, #10
 80016aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e005      	b.n	80016ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	2204      	movs	r2, #4
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d04f      	beq.n	800179c <HAL_DMA_IRQHandler+0xc8>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d04a      	beq.n	800179c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a66      	ldr	r2, [pc, #408]	@ (80018c4 <HAL_DMA_IRQHandler+0x1f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d029      	beq.n	8001782 <HAL_DMA_IRQHandler+0xae>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a65      	ldr	r2, [pc, #404]	@ (80018c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <HAL_DMA_IRQHandler+0xaa>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a63      	ldr	r2, [pc, #396]	@ (80018cc <HAL_DMA_IRQHandler+0x1f8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01a      	beq.n	8001778 <HAL_DMA_IRQHandler+0xa4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a62      	ldr	r2, [pc, #392]	@ (80018d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d012      	beq.n	8001772 <HAL_DMA_IRQHandler+0x9e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a60      	ldr	r2, [pc, #384]	@ (80018d4 <HAL_DMA_IRQHandler+0x200>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00a      	beq.n	800176c <HAL_DMA_IRQHandler+0x98>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5f      	ldr	r2, [pc, #380]	@ (80018d8 <HAL_DMA_IRQHandler+0x204>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d102      	bne.n	8001766 <HAL_DMA_IRQHandler+0x92>
 8001760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001764:	e00e      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 8001766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800176a:	e00b      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 800176c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001770:	e008      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 8001772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001776:	e005      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 8001778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177c:	e002      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 800177e:	2340      	movs	r3, #64	@ 0x40
 8001780:	e000      	b.n	8001784 <HAL_DMA_IRQHandler+0xb0>
 8001782:	2304      	movs	r3, #4
 8001784:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <HAL_DMA_IRQHandler+0x208>)
 8001786:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8094 	beq.w	80018ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800179a:	e08e      	b.n	80018ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	2202      	movs	r2, #2
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d056      	beq.n	800185a <HAL_DMA_IRQHandler+0x186>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d051      	beq.n	800185a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10b      	bne.n	80017dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020a 	bic.w	r2, r2, #10
 80017d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a38      	ldr	r2, [pc, #224]	@ (80018c4 <HAL_DMA_IRQHandler+0x1f0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d029      	beq.n	800183a <HAL_DMA_IRQHandler+0x166>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a37      	ldr	r2, [pc, #220]	@ (80018c8 <HAL_DMA_IRQHandler+0x1f4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <HAL_DMA_IRQHandler+0x162>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a35      	ldr	r2, [pc, #212]	@ (80018cc <HAL_DMA_IRQHandler+0x1f8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01a      	beq.n	8001830 <HAL_DMA_IRQHandler+0x15c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d012      	beq.n	800182a <HAL_DMA_IRQHandler+0x156>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <HAL_DMA_IRQHandler+0x200>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00a      	beq.n	8001824 <HAL_DMA_IRQHandler+0x150>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_DMA_IRQHandler+0x204>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_DMA_IRQHandler+0x14a>
 8001818:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800181c:	e00e      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 800181e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001822:	e00b      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 8001824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001828:	e008      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 800182a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182e:	e005      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 8001830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001834:	e002      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 8001836:	2320      	movs	r3, #32
 8001838:	e000      	b.n	800183c <HAL_DMA_IRQHandler+0x168>
 800183a:	2302      	movs	r3, #2
 800183c:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <HAL_DMA_IRQHandler+0x208>)
 800183e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d034      	beq.n	80018ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001858:	e02f      	b.n	80018ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2208      	movs	r2, #8
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d028      	beq.n	80018bc <HAL_DMA_IRQHandler+0x1e8>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
    }
  }
  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020008 	.word	0x40020008
 80018c8:	4002001c 	.word	0x4002001c
 80018cc:	40020030 	.word	0x40020030
 80018d0:	40020044 	.word	0x40020044
 80018d4:	40020058 	.word	0x40020058
 80018d8:	4002006c 	.word	0x4002006c
 80018dc:	40020000 	.word	0x40020000

080018e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d108      	bne.n	8001920 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800191e:	e007      	b.n	8001930 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
	...

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e169      	b.n	8001c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8158 	bne.w	8001c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a9a      	ldr	r2, [pc, #616]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a98      	ldr	r2, [pc, #608]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a98      	ldr	r2, [pc, #608]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a96      	ldr	r2, [pc, #600]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a96      	ldr	r2, [pc, #600]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a94      	ldr	r2, [pc, #592]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a94      	ldr	r2, [pc, #592]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a92      	ldr	r2, [pc, #584]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a92      	ldr	r2, [pc, #584]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a90      	ldr	r2, [pc, #576]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a79      	ldr	r2, [pc, #484]	@ (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80b1 	beq.w	8001c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a40      	ldr	r2, [pc, #256]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3f      	ldr	r2, [pc, #252]	@ (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3d      	ldr	r2, [pc, #244]	@ (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3a:	492f      	ldr	r1, [pc, #188]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	492c      	ldr	r1, [pc, #176]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4928      	ldr	r1, [pc, #160]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4922      	ldr	r1, [pc, #136]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491e      	ldr	r1, [pc, #120]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4918      	ldr	r1, [pc, #96]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4914      	ldr	r1, [pc, #80]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d021      	beq.n	8001c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e021      	b.n	8001c1e <HAL_GPIO_Init+0x2e2>
 8001bda:	bf00      	nop
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10220000 	.word	0x10220000
 8001be8:	10210000 	.word	0x10210000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_GPIO_Init+0x304>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4909      	ldr	r1, [pc, #36]	@ (8001c40 <HAL_GPIO_Init+0x304>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f ae8e 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	372c      	adds	r7, #44	@ 0x2c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e272      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8087 	beq.w	8001d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c64:	4b92      	ldr	r3, [pc, #584]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c70:	4b8f      	ldr	r3, [pc, #572]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d112      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
 8001c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d10b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4b89      	ldr	r3, [pc, #548]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x12c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d168      	bne.n	8001d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e24c      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x76>
 8001cac:	4b80      	ldr	r3, [pc, #512]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a7f      	ldr	r2, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e02e      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x98>
 8001cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b78      	ldr	r3, [pc, #480]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a77      	ldr	r2, [pc, #476]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0xbc>
 8001ce6:	4b72      	ldr	r3, [pc, #456]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a71      	ldr	r2, [pc, #452]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001d00:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b68      	ldr	r3, [pc, #416]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a67      	ldr	r2, [pc, #412]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fae2 	bl	80012e8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fade 	bl	80012e8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e200      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe4>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff face 	bl	80012e8 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff faca 	bl	80012e8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1ec      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b53      	ldr	r3, [pc, #332]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x10c>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8a:	4b49      	ldr	r3, [pc, #292]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
 8001d96:	4b46      	ldr	r3, [pc, #280]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b43      	ldr	r3, [pc, #268]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1c0      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4939      	ldr	r1, [pc, #228]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fa83 	bl	80012e8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fa7f 	bl	80012e8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1a1      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4927      	ldr	r1, [pc, #156]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa62 	bl	80012e8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fa5e 	bl	80012e8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e180      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03a      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fa42 	bl	80012e8 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fa3e 	bl	80012e8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e160      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f000 fa9c 	bl	80023c4 <RCC_Delay>
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fa28 	bl	80012e8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa24 	bl	80012e8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e146      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	42420000 	.word	0x42420000
 8001eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e9      	bne.n	8001e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a6 	beq.w	8002022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b8b      	ldr	r3, [pc, #556]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b88      	ldr	r3, [pc, #544]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a87      	ldr	r2, [pc, #540]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b85      	ldr	r3, [pc, #532]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b82      	ldr	r3, [pc, #520]	@ (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7e      	ldr	r2, [pc, #504]	@ (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f9e5 	bl	80012e8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7ff f9e1 	bl	80012e8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	@ 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e103      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b75      	ldr	r3, [pc, #468]	@ (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x312>
 8001f48:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e02d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x334>
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a69      	ldr	r2, [pc, #420]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b67      	ldr	r3, [pc, #412]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a66      	ldr	r2, [pc, #408]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x356>
 8001f80:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a60      	ldr	r2, [pc, #384]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a57      	ldr	r2, [pc, #348]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f995 	bl	80012e8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f991 	bl	80012e8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0b1      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x37e>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f97f 	bl	80012e8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff f97b 	bl	80012e8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e09b      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b3c      	ldr	r3, [pc, #240]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a3b      	ldr	r2, [pc, #236]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8087 	beq.w	800213a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202c:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d061      	beq.n	80020fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d146      	bne.n	80020ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b33      	ldr	r3, [pc, #204]	@ (8002110 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff f94f 	bl	80012e8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f94b 	bl	80012e8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e06d      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002074:	d108      	bne.n	8002088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4921      	ldr	r1, [pc, #132]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a19      	ldr	r1, [r3, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	430b      	orrs	r3, r1
 800209a:	491b      	ldr	r1, [pc, #108]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff f91f 	bl	80012e8 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff f91b 	bl	80012e8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e03d      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x46a>
 80020cc:	e035      	b.n	800213a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <HAL_RCC_OscConfig+0x4cc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff f908 	bl	80012e8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f904 	bl	80012e8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e026      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x498>
 80020fa:	e01e      	b.n	800213a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e019      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_RCC_OscConfig+0x500>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4965      	ldr	r1, [pc, #404]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f856 	bl	80012e8 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f852 	bl	80012e8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4922      	ldr	r1, [pc, #136]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	@ (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <HAL_RCC_ClockConfig+0x1cc>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_RCC_ClockConfig+0x1d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ffb4 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08003f84 	.word	0x08003f84
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x30>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x36>
 800234a:	e027      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800234e:	613b      	str	r3, [r7, #16]
      break;
 8002350:	e027      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0c5b      	lsrs	r3, r3, #17
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	4a11      	ldr	r2, [pc, #68]	@ (80023bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	fb03 f202 	mul.w	r2, r3, r2
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e004      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0c      	ldr	r2, [pc, #48]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	613b      	str	r3, [r7, #16]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800239e:	613b      	str	r3, [r7, #16]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	693b      	ldr	r3, [r7, #16]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	007a1200 	.word	0x007a1200
 80023b8:	08003f94 	.word	0x08003f94
 80023bc:	08003fa4 	.word	0x08003fa4
 80023c0:	003d0900 	.word	0x003d0900

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000000 	.word	0x20000000
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fb70 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fc9e 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e041      	b.n	8002534 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f839 	bl	800253c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 fc4f 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e022      	b.n	80025c2 <HAL_TIM_PWM_Start_DMA+0x72>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b04      	cmp	r3, #4
 8002580:	d109      	bne.n	8002596 <HAL_TIM_PWM_Start_DMA+0x46>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e015      	b.n	80025c2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d109      	bne.n	80025b0 <HAL_TIM_PWM_Start_DMA+0x60>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e008      	b.n	80025c2 <HAL_TIM_PWM_Start_DMA+0x72>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	e153      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_TIM_PWM_Start_DMA+0x94>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e022      	b.n	800262a <HAL_TIM_PWM_Start_DMA+0xda>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d109      	bne.n	80025fe <HAL_TIM_PWM_Start_DMA+0xae>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e015      	b.n	800262a <HAL_TIM_PWM_Start_DMA+0xda>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e008      	b.n	800262a <HAL_TIM_PWM_Start_DMA+0xda>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d024      	beq.n	8002678 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_TIM_PWM_Start_DMA+0xea>
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e119      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800264c:	e016      	b.n	800267c <HAL_TIM_PWM_Start_DMA+0x12c>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800265c:	e00e      	b.n	800267c <HAL_TIM_PWM_Start_DMA+0x12c>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800266c:	e006      	b.n	800267c <HAL_TIM_PWM_Start_DMA+0x12c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002676:	e001      	b.n	800267c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0fa      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	f200 80ae 	bhi.w	80027e0 <HAL_TIM_PWM_Start_DMA+0x290>
 8002684:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080027e1 	.word	0x080027e1
 8002694:	080027e1 	.word	0x080027e1
 8002698:	080027e1 	.word	0x080027e1
 800269c:	08002709 	.word	0x08002709
 80026a0:	080027e1 	.word	0x080027e1
 80026a4:	080027e1 	.word	0x080027e1
 80026a8:	080027e1 	.word	0x080027e1
 80026ac:	08002751 	.word	0x08002751
 80026b0:	080027e1 	.word	0x080027e1
 80026b4:	080027e1 	.word	0x080027e1
 80026b8:	080027e1 	.word	0x080027e1
 80026bc:	08002799 	.word	0x08002799
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	4a6d      	ldr	r2, [pc, #436]	@ (800287c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002880 <HAL_TIM_PWM_Start_DMA+0x330>)
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002884 <HAL_TIM_PWM_Start_DMA+0x334>)
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3334      	adds	r3, #52	@ 0x34
 80026e4:	461a      	mov	r2, r3
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	f7fe ff94 	bl	8001614 <HAL_DMA_Start_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0bd      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002704:	60da      	str	r2, [r3, #12]
      break;
 8002706:	e06e      	b.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	4a5b      	ldr	r2, [pc, #364]	@ (800287c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	4a5a      	ldr	r2, [pc, #360]	@ (8002880 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	4a59      	ldr	r2, [pc, #356]	@ (8002884 <HAL_TIM_PWM_Start_DMA+0x334>)
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3338      	adds	r3, #56	@ 0x38
 800272c:	461a      	mov	r2, r3
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	f7fe ff70 	bl	8001614 <HAL_DMA_Start_IT>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e099      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800274c:	60da      	str	r2, [r3, #12]
      break;
 800274e:	e04a      	b.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	4a49      	ldr	r2, [pc, #292]	@ (800287c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	4a48      	ldr	r2, [pc, #288]	@ (8002880 <HAL_TIM_PWM_Start_DMA+0x330>)
 800275e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	4a47      	ldr	r2, [pc, #284]	@ (8002884 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	333c      	adds	r3, #60	@ 0x3c
 8002774:	461a      	mov	r2, r3
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	f7fe ff4c 	bl	8001614 <HAL_DMA_Start_IT>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e075      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002794:	60da      	str	r2, [r3, #12]
      break;
 8002796:	e026      	b.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	4a37      	ldr	r2, [pc, #220]	@ (800287c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	4a36      	ldr	r2, [pc, #216]	@ (8002880 <HAL_TIM_PWM_Start_DMA+0x330>)
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	4a35      	ldr	r2, [pc, #212]	@ (8002884 <HAL_TIM_PWM_Start_DMA+0x334>)
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3340      	adds	r3, #64	@ 0x40
 80027bc:	461a      	mov	r2, r3
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	f7fe ff28 	bl	8001614 <HAL_DMA_Start_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e051      	b.n	8002872 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027dc:	60da      	str	r2, [r3, #12]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75fb      	strb	r3, [r7, #23]
      break;
 80027e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d141      	bne.n	8002870 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fd43 	bl	8003280 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d107      	bne.n	8002814 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <HAL_TIM_PWM_Start_DMA+0x338>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002826:	d009      	beq.n	800283c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a17      	ldr	r2, [pc, #92]	@ (800288c <HAL_TIM_PWM_Start_DMA+0x33c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b06      	cmp	r3, #6
 800284c:	d010      	beq.n	8002870 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	e007      	b.n	8002870 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	08002c6f 	.word	0x08002c6f
 8002880:	08002d17 	.word	0x08002d17
 8002884:	08002bdd 	.word	0x08002bdd
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800

08002894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e0ae      	b.n	8002a10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	f200 809f 	bhi.w	8002a00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028c2:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028fd 	.word	0x080028fd
 80028cc:	08002a01 	.word	0x08002a01
 80028d0:	08002a01 	.word	0x08002a01
 80028d4:	08002a01 	.word	0x08002a01
 80028d8:	0800293d 	.word	0x0800293d
 80028dc:	08002a01 	.word	0x08002a01
 80028e0:	08002a01 	.word	0x08002a01
 80028e4:	08002a01 	.word	0x08002a01
 80028e8:	0800297f 	.word	0x0800297f
 80028ec:	08002a01 	.word	0x08002a01
 80028f0:	08002a01 	.word	0x08002a01
 80028f4:	08002a01 	.word	0x08002a01
 80028f8:	080029bf 	.word	0x080029bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa9e 	bl	8002e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0208 	orr.w	r2, r2, #8
 8002916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	619a      	str	r2, [r3, #24]
      break;
 800293a:	e064      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fae4 	bl	8002f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6999      	ldr	r1, [r3, #24]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	021a      	lsls	r2, r3, #8
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	619a      	str	r2, [r3, #24]
      break;
 800297c:	e043      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fb2d 	bl	8002fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0208 	orr.w	r2, r2, #8
 8002998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0204 	bic.w	r2, r2, #4
 80029a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69d9      	ldr	r1, [r3, #28]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	61da      	str	r2, [r3, #28]
      break;
 80029bc:	e023      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fb77 	bl	80030b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69d9      	ldr	r1, [r3, #28]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	021a      	lsls	r2, r3, #8
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	61da      	str	r2, [r3, #28]
      break;
 80029fe:	e002      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
      break;
 8002a04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_ConfigClockSource+0x1c>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0b4      	b.n	8002b9e <HAL_TIM_ConfigClockSource+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a6c:	d03e      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0xd4>
 8002a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a72:	f200 8087 	bhi.w	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7a:	f000 8086 	beq.w	8002b8a <HAL_TIM_ConfigClockSource+0x172>
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a82:	d87f      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b70      	cmp	r3, #112	@ 0x70
 8002a86:	d01a      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0xa6>
 8002a88:	2b70      	cmp	r3, #112	@ 0x70
 8002a8a:	d87b      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b60      	cmp	r3, #96	@ 0x60
 8002a8e:	d050      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x11a>
 8002a90:	2b60      	cmp	r3, #96	@ 0x60
 8002a92:	d877      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b50      	cmp	r3, #80	@ 0x50
 8002a96:	d03c      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xfa>
 8002a98:	2b50      	cmp	r3, #80	@ 0x50
 8002a9a:	d873      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d058      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x13a>
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d86f      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b30      	cmp	r3, #48	@ 0x30
 8002aa6:	d064      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	2b30      	cmp	r3, #48	@ 0x30
 8002aaa:	d86b      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d060      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d867      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05c      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d05a      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	e062      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ace:	f000 fbb8 	bl	8003242 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
      break;
 8002aea:	e04f      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002afc:	f000 fba1 	bl	8003242 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0e:	609a      	str	r2, [r3, #8]
      break;
 8002b10:	e03c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 fb18 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2150      	movs	r1, #80	@ 0x50
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fb6f 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002b30:	e02c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 fb36 	bl	80031b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2160      	movs	r1, #96	@ 0x60
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fb5f 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002b50:	e01c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f000 faf8 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2140      	movs	r1, #64	@ 0x40
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fb4f 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002b70:	e00c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f000 fb46 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002b82:	e003      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e000      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c02:	e02a      	b.n	8002c5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2202      	movs	r2, #2
 8002c12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c1c:	e01d      	b.n	8002c5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c36:	e010      	b.n	8002c5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d107      	bne.n	8002c52 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2208      	movs	r2, #8
 8002c46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c50:	e003      	b.n	8002c5a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff ffb5 	bl	8002bca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	771a      	strb	r2, [r3, #28]
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10b      	bne.n	8002c9e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d136      	bne.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c9c:	e031      	b.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10b      	bne.n	8002cc0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2202      	movs	r2, #2
 8002cac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d125      	bne.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbe:	e020      	b.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10b      	bne.n	8002ce2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d114      	bne.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce0:	e00f      	b.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d10a      	bne.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff ff4f 	bl	8002ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d103      	bne.n	8002d36 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	771a      	strb	r2, [r3, #28]
 8002d34:	e019      	b.n	8002d6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d103      	bne.n	8002d48 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	771a      	strb	r2, [r3, #28]
 8002d46:	e010      	b.n	8002d6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d103      	bne.n	8002d5a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
 8002d58:	e007      	b.n	8002d6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d102      	bne.n	8002d6a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2208      	movs	r2, #8
 8002d68:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff24 	bl	8002bb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	771a      	strb	r2, [r3, #28]
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a26      	ldr	r2, [pc, #152]	@ (8002e3c <TIM_Base_SetConfig+0xbc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a25      	ldr	r2, [pc, #148]	@ (8002e40 <TIM_Base_SetConfig+0xc0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	@ (8002e3c <TIM_Base_SetConfig+0xbc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	@ (8002e40 <TIM_Base_SetConfig+0xc0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800

08002e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0201 	bic.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <TIM_OC1_SetConfig+0xc8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0308 	bic.w	r3, r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <TIM_OC1_SetConfig+0xc8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d111      	bne.n	8002ee6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40012c00 	.word	0x40012c00

08002f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 0210 	bic.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0320 	bic.w	r3, r3, #32
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <TIM_OC2_SetConfig+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10d      	bne.n	8002f8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <TIM_OC2_SetConfig+0xd0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d113      	bne.n	8002fbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00

08002fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <TIM_OC3_SetConfig+0xd0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800305c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <TIM_OC3_SetConfig+0xd0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d113      	bne.n	800308e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00

080030b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	031b      	lsls	r3, r3, #12
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0f      	ldr	r2, [pc, #60]	@ (8003150 <TIM_OC4_SetConfig+0x98>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d109      	bne.n	800312c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800311e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40012c00 	.word	0x40012c00

08003154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 030a 	bic.w	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0210 	bic.w	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	f043 0307 	orr.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800325c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	021a      	lsls	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2201      	movs	r2, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e046      	b.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332c:	d009      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a10      	ldr	r2, [pc, #64]	@ (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10c      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4313      	orrs	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800

08003384 <memset>:
 8003384:	4603      	mov	r3, r0
 8003386:	4402      	add	r2, r0
 8003388:	4293      	cmp	r3, r2
 800338a:	d100      	bne.n	800338e <memset+0xa>
 800338c:	4770      	bx	lr
 800338e:	f803 1b01 	strb.w	r1, [r3], #1
 8003392:	e7f9      	b.n	8003388 <memset+0x4>

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	2600      	movs	r6, #0
 8003398:	4d0c      	ldr	r5, [pc, #48]	@ (80033cc <__libc_init_array+0x38>)
 800339a:	4c0d      	ldr	r4, [pc, #52]	@ (80033d0 <__libc_init_array+0x3c>)
 800339c:	1b64      	subs	r4, r4, r5
 800339e:	10a4      	asrs	r4, r4, #2
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	f000 fde2 	bl	8003f6c <_init>
 80033a8:	2600      	movs	r6, #0
 80033aa:	4d0a      	ldr	r5, [pc, #40]	@ (80033d4 <__libc_init_array+0x40>)
 80033ac:	4c0a      	ldr	r4, [pc, #40]	@ (80033d8 <__libc_init_array+0x44>)
 80033ae:	1b64      	subs	r4, r4, r5
 80033b0:	10a4      	asrs	r4, r4, #2
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	08004378 	.word	0x08004378
 80033d0:	08004378 	.word	0x08004378
 80033d4:	08004378 	.word	0x08004378
 80033d8:	0800437c 	.word	0x0800437c

080033dc <sinf>:
 80033dc:	b507      	push	{r0, r1, r2, lr}
 80033de:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <sinf+0x70>)
 80033e0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80033e4:	4293      	cmp	r3, r2
 80033e6:	4601      	mov	r1, r0
 80033e8:	d806      	bhi.n	80033f8 <sinf+0x1c>
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	b003      	add	sp, #12
 80033f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f4:	f000 b8ac 	b.w	8003550 <__kernel_sinf>
 80033f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80033fc:	d304      	bcc.n	8003408 <sinf+0x2c>
 80033fe:	f7fc fea9 	bl	8000154 <__aeabi_fsub>
 8003402:	b003      	add	sp, #12
 8003404:	f85d fb04 	ldr.w	pc, [sp], #4
 8003408:	4669      	mov	r1, sp
 800340a:	f000 f917 	bl	800363c <__ieee754_rem_pio2f>
 800340e:	f000 0003 	and.w	r0, r0, #3
 8003412:	2801      	cmp	r0, #1
 8003414:	d008      	beq.n	8003428 <sinf+0x4c>
 8003416:	2802      	cmp	r0, #2
 8003418:	d00b      	beq.n	8003432 <sinf+0x56>
 800341a:	b990      	cbnz	r0, 8003442 <sinf+0x66>
 800341c:	2201      	movs	r2, #1
 800341e:	9901      	ldr	r1, [sp, #4]
 8003420:	9800      	ldr	r0, [sp, #0]
 8003422:	f000 f895 	bl	8003550 <__kernel_sinf>
 8003426:	e7ec      	b.n	8003402 <sinf+0x26>
 8003428:	9901      	ldr	r1, [sp, #4]
 800342a:	9800      	ldr	r0, [sp, #0]
 800342c:	f000 f810 	bl	8003450 <__kernel_cosf>
 8003430:	e7e7      	b.n	8003402 <sinf+0x26>
 8003432:	2201      	movs	r2, #1
 8003434:	9901      	ldr	r1, [sp, #4]
 8003436:	9800      	ldr	r0, [sp, #0]
 8003438:	f000 f88a 	bl	8003550 <__kernel_sinf>
 800343c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003440:	e7df      	b.n	8003402 <sinf+0x26>
 8003442:	9901      	ldr	r1, [sp, #4]
 8003444:	9800      	ldr	r0, [sp, #0]
 8003446:	f000 f803 	bl	8003450 <__kernel_cosf>
 800344a:	e7f7      	b.n	800343c <sinf+0x60>
 800344c:	3f490fd8 	.word	0x3f490fd8

08003450 <__kernel_cosf>:
 8003450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003454:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003458:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800345c:	4606      	mov	r6, r0
 800345e:	4688      	mov	r8, r1
 8003460:	d203      	bcs.n	800346a <__kernel_cosf+0x1a>
 8003462:	f7fd f947 	bl	80006f4 <__aeabi_f2iz>
 8003466:	2800      	cmp	r0, #0
 8003468:	d05c      	beq.n	8003524 <__kernel_cosf+0xd4>
 800346a:	4631      	mov	r1, r6
 800346c:	4630      	mov	r0, r6
 800346e:	f7fc ff7b 	bl	8000368 <__aeabi_fmul>
 8003472:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003476:	4604      	mov	r4, r0
 8003478:	f7fc ff76 	bl	8000368 <__aeabi_fmul>
 800347c:	492b      	ldr	r1, [pc, #172]	@ (800352c <__kernel_cosf+0xdc>)
 800347e:	4607      	mov	r7, r0
 8003480:	4620      	mov	r0, r4
 8003482:	f7fc ff71 	bl	8000368 <__aeabi_fmul>
 8003486:	492a      	ldr	r1, [pc, #168]	@ (8003530 <__kernel_cosf+0xe0>)
 8003488:	f7fc fe66 	bl	8000158 <__addsf3>
 800348c:	4621      	mov	r1, r4
 800348e:	f7fc ff6b 	bl	8000368 <__aeabi_fmul>
 8003492:	4928      	ldr	r1, [pc, #160]	@ (8003534 <__kernel_cosf+0xe4>)
 8003494:	f7fc fe5e 	bl	8000154 <__aeabi_fsub>
 8003498:	4621      	mov	r1, r4
 800349a:	f7fc ff65 	bl	8000368 <__aeabi_fmul>
 800349e:	4926      	ldr	r1, [pc, #152]	@ (8003538 <__kernel_cosf+0xe8>)
 80034a0:	f7fc fe5a 	bl	8000158 <__addsf3>
 80034a4:	4621      	mov	r1, r4
 80034a6:	f7fc ff5f 	bl	8000368 <__aeabi_fmul>
 80034aa:	4924      	ldr	r1, [pc, #144]	@ (800353c <__kernel_cosf+0xec>)
 80034ac:	f7fc fe52 	bl	8000154 <__aeabi_fsub>
 80034b0:	4621      	mov	r1, r4
 80034b2:	f7fc ff59 	bl	8000368 <__aeabi_fmul>
 80034b6:	4922      	ldr	r1, [pc, #136]	@ (8003540 <__kernel_cosf+0xf0>)
 80034b8:	f7fc fe4e 	bl	8000158 <__addsf3>
 80034bc:	4621      	mov	r1, r4
 80034be:	f7fc ff53 	bl	8000368 <__aeabi_fmul>
 80034c2:	4621      	mov	r1, r4
 80034c4:	f7fc ff50 	bl	8000368 <__aeabi_fmul>
 80034c8:	4641      	mov	r1, r8
 80034ca:	4604      	mov	r4, r0
 80034cc:	4630      	mov	r0, r6
 80034ce:	f7fc ff4b 	bl	8000368 <__aeabi_fmul>
 80034d2:	4601      	mov	r1, r0
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7fc fe3d 	bl	8000154 <__aeabi_fsub>
 80034da:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <__kernel_cosf+0xf4>)
 80034dc:	4604      	mov	r4, r0
 80034de:	429d      	cmp	r5, r3
 80034e0:	d80a      	bhi.n	80034f8 <__kernel_cosf+0xa8>
 80034e2:	4601      	mov	r1, r0
 80034e4:	4638      	mov	r0, r7
 80034e6:	f7fc fe35 	bl	8000154 <__aeabi_fsub>
 80034ea:	4601      	mov	r1, r0
 80034ec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80034f0:	f7fc fe30 	bl	8000154 <__aeabi_fsub>
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <__kernel_cosf+0xf8>)
 80034fa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80034fe:	429d      	cmp	r5, r3
 8003500:	bf8c      	ite	hi
 8003502:	4d12      	ldrhi	r5, [pc, #72]	@ (800354c <__kernel_cosf+0xfc>)
 8003504:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8003508:	4629      	mov	r1, r5
 800350a:	f7fc fe23 	bl	8000154 <__aeabi_fsub>
 800350e:	4629      	mov	r1, r5
 8003510:	4606      	mov	r6, r0
 8003512:	4638      	mov	r0, r7
 8003514:	f7fc fe1e 	bl	8000154 <__aeabi_fsub>
 8003518:	4621      	mov	r1, r4
 800351a:	f7fc fe1b 	bl	8000154 <__aeabi_fsub>
 800351e:	4601      	mov	r1, r0
 8003520:	4630      	mov	r0, r6
 8003522:	e7e5      	b.n	80034f0 <__kernel_cosf+0xa0>
 8003524:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003528:	e7e4      	b.n	80034f4 <__kernel_cosf+0xa4>
 800352a:	bf00      	nop
 800352c:	ad47d74e 	.word	0xad47d74e
 8003530:	310f74f6 	.word	0x310f74f6
 8003534:	3493f27c 	.word	0x3493f27c
 8003538:	37d00d01 	.word	0x37d00d01
 800353c:	3ab60b61 	.word	0x3ab60b61
 8003540:	3d2aaaab 	.word	0x3d2aaaab
 8003544:	3e999999 	.word	0x3e999999
 8003548:	3f480000 	.word	0x3f480000
 800354c:	3e900000 	.word	0x3e900000

08003550 <__kernel_sinf>:
 8003550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003554:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003558:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800355c:	4604      	mov	r4, r0
 800355e:	460f      	mov	r7, r1
 8003560:	4691      	mov	r9, r2
 8003562:	d203      	bcs.n	800356c <__kernel_sinf+0x1c>
 8003564:	f7fd f8c6 	bl	80006f4 <__aeabi_f2iz>
 8003568:	2800      	cmp	r0, #0
 800356a:	d035      	beq.n	80035d8 <__kernel_sinf+0x88>
 800356c:	4621      	mov	r1, r4
 800356e:	4620      	mov	r0, r4
 8003570:	f7fc fefa 	bl	8000368 <__aeabi_fmul>
 8003574:	4605      	mov	r5, r0
 8003576:	4601      	mov	r1, r0
 8003578:	4620      	mov	r0, r4
 800357a:	f7fc fef5 	bl	8000368 <__aeabi_fmul>
 800357e:	4929      	ldr	r1, [pc, #164]	@ (8003624 <__kernel_sinf+0xd4>)
 8003580:	4606      	mov	r6, r0
 8003582:	4628      	mov	r0, r5
 8003584:	f7fc fef0 	bl	8000368 <__aeabi_fmul>
 8003588:	4927      	ldr	r1, [pc, #156]	@ (8003628 <__kernel_sinf+0xd8>)
 800358a:	f7fc fde3 	bl	8000154 <__aeabi_fsub>
 800358e:	4629      	mov	r1, r5
 8003590:	f7fc feea 	bl	8000368 <__aeabi_fmul>
 8003594:	4925      	ldr	r1, [pc, #148]	@ (800362c <__kernel_sinf+0xdc>)
 8003596:	f7fc fddf 	bl	8000158 <__addsf3>
 800359a:	4629      	mov	r1, r5
 800359c:	f7fc fee4 	bl	8000368 <__aeabi_fmul>
 80035a0:	4923      	ldr	r1, [pc, #140]	@ (8003630 <__kernel_sinf+0xe0>)
 80035a2:	f7fc fdd7 	bl	8000154 <__aeabi_fsub>
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc fede 	bl	8000368 <__aeabi_fmul>
 80035ac:	4921      	ldr	r1, [pc, #132]	@ (8003634 <__kernel_sinf+0xe4>)
 80035ae:	f7fc fdd3 	bl	8000158 <__addsf3>
 80035b2:	4680      	mov	r8, r0
 80035b4:	f1b9 0f00 	cmp.w	r9, #0
 80035b8:	d111      	bne.n	80035de <__kernel_sinf+0x8e>
 80035ba:	4601      	mov	r1, r0
 80035bc:	4628      	mov	r0, r5
 80035be:	f7fc fed3 	bl	8000368 <__aeabi_fmul>
 80035c2:	491d      	ldr	r1, [pc, #116]	@ (8003638 <__kernel_sinf+0xe8>)
 80035c4:	f7fc fdc6 	bl	8000154 <__aeabi_fsub>
 80035c8:	4631      	mov	r1, r6
 80035ca:	f7fc fecd 	bl	8000368 <__aeabi_fmul>
 80035ce:	4601      	mov	r1, r0
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7fc fdc1 	bl	8000158 <__addsf3>
 80035d6:	4604      	mov	r4, r0
 80035d8:	4620      	mov	r0, r4
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80035e2:	4638      	mov	r0, r7
 80035e4:	f7fc fec0 	bl	8000368 <__aeabi_fmul>
 80035e8:	4641      	mov	r1, r8
 80035ea:	4681      	mov	r9, r0
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7fc febb 	bl	8000368 <__aeabi_fmul>
 80035f2:	4601      	mov	r1, r0
 80035f4:	4648      	mov	r0, r9
 80035f6:	f7fc fdad 	bl	8000154 <__aeabi_fsub>
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fc feb4 	bl	8000368 <__aeabi_fmul>
 8003600:	4639      	mov	r1, r7
 8003602:	f7fc fda7 	bl	8000154 <__aeabi_fsub>
 8003606:	490c      	ldr	r1, [pc, #48]	@ (8003638 <__kernel_sinf+0xe8>)
 8003608:	4605      	mov	r5, r0
 800360a:	4630      	mov	r0, r6
 800360c:	f7fc feac 	bl	8000368 <__aeabi_fmul>
 8003610:	4601      	mov	r1, r0
 8003612:	4628      	mov	r0, r5
 8003614:	f7fc fda0 	bl	8000158 <__addsf3>
 8003618:	4601      	mov	r1, r0
 800361a:	4620      	mov	r0, r4
 800361c:	f7fc fd9a 	bl	8000154 <__aeabi_fsub>
 8003620:	e7d9      	b.n	80035d6 <__kernel_sinf+0x86>
 8003622:	bf00      	nop
 8003624:	2f2ec9d3 	.word	0x2f2ec9d3
 8003628:	32d72f34 	.word	0x32d72f34
 800362c:	3638ef1b 	.word	0x3638ef1b
 8003630:	39500d01 	.word	0x39500d01
 8003634:	3c088889 	.word	0x3c088889
 8003638:	3e2aaaab 	.word	0x3e2aaaab

0800363c <__ieee754_rem_pio2f>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	4aa4      	ldr	r2, [pc, #656]	@ (80038d4 <__ieee754_rem_pio2f+0x298>)
 8003642:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8003646:	4590      	cmp	r8, r2
 8003648:	460c      	mov	r4, r1
 800364a:	4682      	mov	sl, r0
 800364c:	b087      	sub	sp, #28
 800364e:	d804      	bhi.n	800365a <__ieee754_rem_pio2f+0x1e>
 8003650:	2300      	movs	r3, #0
 8003652:	6008      	str	r0, [r1, #0]
 8003654:	604b      	str	r3, [r1, #4]
 8003656:	2500      	movs	r5, #0
 8003658:	e01d      	b.n	8003696 <__ieee754_rem_pio2f+0x5a>
 800365a:	4a9f      	ldr	r2, [pc, #636]	@ (80038d8 <__ieee754_rem_pio2f+0x29c>)
 800365c:	4590      	cmp	r8, r2
 800365e:	d84f      	bhi.n	8003700 <__ieee754_rem_pio2f+0xc4>
 8003660:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003664:	2800      	cmp	r0, #0
 8003666:	499d      	ldr	r1, [pc, #628]	@ (80038dc <__ieee754_rem_pio2f+0x2a0>)
 8003668:	4f9d      	ldr	r7, [pc, #628]	@ (80038e0 <__ieee754_rem_pio2f+0x2a4>)
 800366a:	f025 050f 	bic.w	r5, r5, #15
 800366e:	dd24      	ble.n	80036ba <__ieee754_rem_pio2f+0x7e>
 8003670:	f7fc fd70 	bl	8000154 <__aeabi_fsub>
 8003674:	42bd      	cmp	r5, r7
 8003676:	4606      	mov	r6, r0
 8003678:	d011      	beq.n	800369e <__ieee754_rem_pio2f+0x62>
 800367a:	499a      	ldr	r1, [pc, #616]	@ (80038e4 <__ieee754_rem_pio2f+0x2a8>)
 800367c:	f7fc fd6a 	bl	8000154 <__aeabi_fsub>
 8003680:	4601      	mov	r1, r0
 8003682:	4605      	mov	r5, r0
 8003684:	4630      	mov	r0, r6
 8003686:	f7fc fd65 	bl	8000154 <__aeabi_fsub>
 800368a:	4996      	ldr	r1, [pc, #600]	@ (80038e4 <__ieee754_rem_pio2f+0x2a8>)
 800368c:	f7fc fd62 	bl	8000154 <__aeabi_fsub>
 8003690:	6025      	str	r5, [r4, #0]
 8003692:	2501      	movs	r5, #1
 8003694:	6060      	str	r0, [r4, #4]
 8003696:	4628      	mov	r0, r5
 8003698:	b007      	add	sp, #28
 800369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369e:	4992      	ldr	r1, [pc, #584]	@ (80038e8 <__ieee754_rem_pio2f+0x2ac>)
 80036a0:	f7fc fd58 	bl	8000154 <__aeabi_fsub>
 80036a4:	4991      	ldr	r1, [pc, #580]	@ (80038ec <__ieee754_rem_pio2f+0x2b0>)
 80036a6:	4606      	mov	r6, r0
 80036a8:	f7fc fd54 	bl	8000154 <__aeabi_fsub>
 80036ac:	4601      	mov	r1, r0
 80036ae:	4605      	mov	r5, r0
 80036b0:	4630      	mov	r0, r6
 80036b2:	f7fc fd4f 	bl	8000154 <__aeabi_fsub>
 80036b6:	498d      	ldr	r1, [pc, #564]	@ (80038ec <__ieee754_rem_pio2f+0x2b0>)
 80036b8:	e7e8      	b.n	800368c <__ieee754_rem_pio2f+0x50>
 80036ba:	f7fc fd4d 	bl	8000158 <__addsf3>
 80036be:	42bd      	cmp	r5, r7
 80036c0:	4606      	mov	r6, r0
 80036c2:	d00f      	beq.n	80036e4 <__ieee754_rem_pio2f+0xa8>
 80036c4:	4987      	ldr	r1, [pc, #540]	@ (80038e4 <__ieee754_rem_pio2f+0x2a8>)
 80036c6:	f7fc fd47 	bl	8000158 <__addsf3>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4605      	mov	r5, r0
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7fc fd40 	bl	8000154 <__aeabi_fsub>
 80036d4:	4983      	ldr	r1, [pc, #524]	@ (80038e4 <__ieee754_rem_pio2f+0x2a8>)
 80036d6:	f7fc fd3f 	bl	8000158 <__addsf3>
 80036da:	6025      	str	r5, [r4, #0]
 80036dc:	6060      	str	r0, [r4, #4]
 80036de:	f04f 35ff 	mov.w	r5, #4294967295
 80036e2:	e7d8      	b.n	8003696 <__ieee754_rem_pio2f+0x5a>
 80036e4:	4980      	ldr	r1, [pc, #512]	@ (80038e8 <__ieee754_rem_pio2f+0x2ac>)
 80036e6:	f7fc fd37 	bl	8000158 <__addsf3>
 80036ea:	4980      	ldr	r1, [pc, #512]	@ (80038ec <__ieee754_rem_pio2f+0x2b0>)
 80036ec:	4606      	mov	r6, r0
 80036ee:	f7fc fd33 	bl	8000158 <__addsf3>
 80036f2:	4601      	mov	r1, r0
 80036f4:	4605      	mov	r5, r0
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7fc fd2c 	bl	8000154 <__aeabi_fsub>
 80036fc:	497b      	ldr	r1, [pc, #492]	@ (80038ec <__ieee754_rem_pio2f+0x2b0>)
 80036fe:	e7ea      	b.n	80036d6 <__ieee754_rem_pio2f+0x9a>
 8003700:	4a7b      	ldr	r2, [pc, #492]	@ (80038f0 <__ieee754_rem_pio2f+0x2b4>)
 8003702:	4590      	cmp	r8, r2
 8003704:	f200 8095 	bhi.w	8003832 <__ieee754_rem_pio2f+0x1f6>
 8003708:	f000 f8fe 	bl	8003908 <fabsf>
 800370c:	4979      	ldr	r1, [pc, #484]	@ (80038f4 <__ieee754_rem_pio2f+0x2b8>)
 800370e:	4606      	mov	r6, r0
 8003710:	f7fc fe2a 	bl	8000368 <__aeabi_fmul>
 8003714:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003718:	f7fc fd1e 	bl	8000158 <__addsf3>
 800371c:	f7fc ffea 	bl	80006f4 <__aeabi_f2iz>
 8003720:	4605      	mov	r5, r0
 8003722:	f7fc fdcd 	bl	80002c0 <__aeabi_i2f>
 8003726:	496d      	ldr	r1, [pc, #436]	@ (80038dc <__ieee754_rem_pio2f+0x2a0>)
 8003728:	4681      	mov	r9, r0
 800372a:	f7fc fe1d 	bl	8000368 <__aeabi_fmul>
 800372e:	4601      	mov	r1, r0
 8003730:	4630      	mov	r0, r6
 8003732:	f7fc fd0f 	bl	8000154 <__aeabi_fsub>
 8003736:	496b      	ldr	r1, [pc, #428]	@ (80038e4 <__ieee754_rem_pio2f+0x2a8>)
 8003738:	4607      	mov	r7, r0
 800373a:	4648      	mov	r0, r9
 800373c:	f7fc fe14 	bl	8000368 <__aeabi_fmul>
 8003740:	2d1f      	cmp	r5, #31
 8003742:	4606      	mov	r6, r0
 8003744:	dc0e      	bgt.n	8003764 <__ieee754_rem_pio2f+0x128>
 8003746:	4a6c      	ldr	r2, [pc, #432]	@ (80038f8 <__ieee754_rem_pio2f+0x2bc>)
 8003748:	1e69      	subs	r1, r5, #1
 800374a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800374e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8003752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <__ieee754_rem_pio2f+0x128>
 800375a:	4631      	mov	r1, r6
 800375c:	4638      	mov	r0, r7
 800375e:	f7fc fcf9 	bl	8000154 <__aeabi_fsub>
 8003762:	e00b      	b.n	800377c <__ieee754_rem_pio2f+0x140>
 8003764:	4631      	mov	r1, r6
 8003766:	4638      	mov	r0, r7
 8003768:	f7fc fcf4 	bl	8000154 <__aeabi_fsub>
 800376c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003770:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8003774:	2b08      	cmp	r3, #8
 8003776:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800377a:	dc01      	bgt.n	8003780 <__ieee754_rem_pio2f+0x144>
 800377c:	6020      	str	r0, [r4, #0]
 800377e:	e026      	b.n	80037ce <__ieee754_rem_pio2f+0x192>
 8003780:	4959      	ldr	r1, [pc, #356]	@ (80038e8 <__ieee754_rem_pio2f+0x2ac>)
 8003782:	4648      	mov	r0, r9
 8003784:	f7fc fdf0 	bl	8000368 <__aeabi_fmul>
 8003788:	4606      	mov	r6, r0
 800378a:	4601      	mov	r1, r0
 800378c:	4638      	mov	r0, r7
 800378e:	f7fc fce1 	bl	8000154 <__aeabi_fsub>
 8003792:	4601      	mov	r1, r0
 8003794:	4680      	mov	r8, r0
 8003796:	4638      	mov	r0, r7
 8003798:	f7fc fcdc 	bl	8000154 <__aeabi_fsub>
 800379c:	4631      	mov	r1, r6
 800379e:	f7fc fcd9 	bl	8000154 <__aeabi_fsub>
 80037a2:	4606      	mov	r6, r0
 80037a4:	4951      	ldr	r1, [pc, #324]	@ (80038ec <__ieee754_rem_pio2f+0x2b0>)
 80037a6:	4648      	mov	r0, r9
 80037a8:	f7fc fdde 	bl	8000368 <__aeabi_fmul>
 80037ac:	4631      	mov	r1, r6
 80037ae:	f7fc fcd1 	bl	8000154 <__aeabi_fsub>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4606      	mov	r6, r0
 80037b6:	4640      	mov	r0, r8
 80037b8:	f7fc fccc 	bl	8000154 <__aeabi_fsub>
 80037bc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80037c0:	ebab 0b03 	sub.w	fp, fp, r3
 80037c4:	f1bb 0f19 	cmp.w	fp, #25
 80037c8:	dc18      	bgt.n	80037fc <__ieee754_rem_pio2f+0x1c0>
 80037ca:	4647      	mov	r7, r8
 80037cc:	6020      	str	r0, [r4, #0]
 80037ce:	f8d4 8000 	ldr.w	r8, [r4]
 80037d2:	4638      	mov	r0, r7
 80037d4:	4641      	mov	r1, r8
 80037d6:	f7fc fcbd 	bl	8000154 <__aeabi_fsub>
 80037da:	4631      	mov	r1, r6
 80037dc:	f7fc fcba 	bl	8000154 <__aeabi_fsub>
 80037e0:	f1ba 0f00 	cmp.w	sl, #0
 80037e4:	6060      	str	r0, [r4, #4]
 80037e6:	f6bf af56 	bge.w	8003696 <__ieee754_rem_pio2f+0x5a>
 80037ea:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80037ee:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80037f2:	f8c4 8000 	str.w	r8, [r4]
 80037f6:	6060      	str	r0, [r4, #4]
 80037f8:	426d      	negs	r5, r5
 80037fa:	e74c      	b.n	8003696 <__ieee754_rem_pio2f+0x5a>
 80037fc:	493f      	ldr	r1, [pc, #252]	@ (80038fc <__ieee754_rem_pio2f+0x2c0>)
 80037fe:	4648      	mov	r0, r9
 8003800:	f7fc fdb2 	bl	8000368 <__aeabi_fmul>
 8003804:	4606      	mov	r6, r0
 8003806:	4601      	mov	r1, r0
 8003808:	4640      	mov	r0, r8
 800380a:	f7fc fca3 	bl	8000154 <__aeabi_fsub>
 800380e:	4601      	mov	r1, r0
 8003810:	4607      	mov	r7, r0
 8003812:	4640      	mov	r0, r8
 8003814:	f7fc fc9e 	bl	8000154 <__aeabi_fsub>
 8003818:	4631      	mov	r1, r6
 800381a:	f7fc fc9b 	bl	8000154 <__aeabi_fsub>
 800381e:	4606      	mov	r6, r0
 8003820:	4937      	ldr	r1, [pc, #220]	@ (8003900 <__ieee754_rem_pio2f+0x2c4>)
 8003822:	4648      	mov	r0, r9
 8003824:	f7fc fda0 	bl	8000368 <__aeabi_fmul>
 8003828:	4631      	mov	r1, r6
 800382a:	f7fc fc93 	bl	8000154 <__aeabi_fsub>
 800382e:	4606      	mov	r6, r0
 8003830:	e793      	b.n	800375a <__ieee754_rem_pio2f+0x11e>
 8003832:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003836:	d305      	bcc.n	8003844 <__ieee754_rem_pio2f+0x208>
 8003838:	4601      	mov	r1, r0
 800383a:	f7fc fc8b 	bl	8000154 <__aeabi_fsub>
 800383e:	6060      	str	r0, [r4, #4]
 8003840:	6020      	str	r0, [r4, #0]
 8003842:	e708      	b.n	8003656 <__ieee754_rem_pio2f+0x1a>
 8003844:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8003848:	3e86      	subs	r6, #134	@ 0x86
 800384a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800384e:	4640      	mov	r0, r8
 8003850:	f7fc ff50 	bl	80006f4 <__aeabi_f2iz>
 8003854:	f7fc fd34 	bl	80002c0 <__aeabi_i2f>
 8003858:	4601      	mov	r1, r0
 800385a:	9003      	str	r0, [sp, #12]
 800385c:	4640      	mov	r0, r8
 800385e:	f7fc fc79 	bl	8000154 <__aeabi_fsub>
 8003862:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003866:	f7fc fd7f 	bl	8000368 <__aeabi_fmul>
 800386a:	4607      	mov	r7, r0
 800386c:	f7fc ff42 	bl	80006f4 <__aeabi_f2iz>
 8003870:	f7fc fd26 	bl	80002c0 <__aeabi_i2f>
 8003874:	4601      	mov	r1, r0
 8003876:	9004      	str	r0, [sp, #16]
 8003878:	4605      	mov	r5, r0
 800387a:	4638      	mov	r0, r7
 800387c:	f7fc fc6a 	bl	8000154 <__aeabi_fsub>
 8003880:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003884:	f7fc fd70 	bl	8000368 <__aeabi_fmul>
 8003888:	2100      	movs	r1, #0
 800388a:	9005      	str	r0, [sp, #20]
 800388c:	f7fc ff00 	bl	8000690 <__aeabi_fcmpeq>
 8003890:	b1f0      	cbz	r0, 80038d0 <__ieee754_rem_pio2f+0x294>
 8003892:	2100      	movs	r1, #0
 8003894:	4628      	mov	r0, r5
 8003896:	f7fc fefb 	bl	8000690 <__aeabi_fcmpeq>
 800389a:	2800      	cmp	r0, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2302      	moveq	r3, #2
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <__ieee754_rem_pio2f+0x2c8>)
 80038a4:	4621      	mov	r1, r4
 80038a6:	9201      	str	r2, [sp, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	a803      	add	r0, sp, #12
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	4632      	mov	r2, r6
 80038b0:	f000 f82e 	bl	8003910 <__kernel_rem_pio2f>
 80038b4:	f1ba 0f00 	cmp.w	sl, #0
 80038b8:	4605      	mov	r5, r0
 80038ba:	f6bf aeec 	bge.w	8003696 <__ieee754_rem_pio2f+0x5a>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	e793      	b.n	80037f8 <__ieee754_rem_pio2f+0x1bc>
 80038d0:	2303      	movs	r3, #3
 80038d2:	e7e6      	b.n	80038a2 <__ieee754_rem_pio2f+0x266>
 80038d4:	3f490fd8 	.word	0x3f490fd8
 80038d8:	4016cbe3 	.word	0x4016cbe3
 80038dc:	3fc90f80 	.word	0x3fc90f80
 80038e0:	3fc90fd0 	.word	0x3fc90fd0
 80038e4:	37354443 	.word	0x37354443
 80038e8:	37354400 	.word	0x37354400
 80038ec:	2e85a308 	.word	0x2e85a308
 80038f0:	43490f80 	.word	0x43490f80
 80038f4:	3f22f984 	.word	0x3f22f984
 80038f8:	08003fa8 	.word	0x08003fa8
 80038fc:	2e85a300 	.word	0x2e85a300
 8003900:	248d3132 	.word	0x248d3132
 8003904:	08004028 	.word	0x08004028

08003908 <fabsf>:
 8003908:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800390c:	4770      	bx	lr
	...

08003910 <__kernel_rem_pio2f>:
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	b0db      	sub	sp, #364	@ 0x16c
 8003916:	9202      	str	r2, [sp, #8]
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800391c:	4bad      	ldr	r3, [pc, #692]	@ (8003bd4 <__kernel_rem_pio2f+0x2c4>)
 800391e:	9005      	str	r0, [sp, #20]
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	9100      	str	r1, [sp, #0]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	9b04      	ldr	r3, [sp, #16]
 800392a:	3b01      	subs	r3, #1
 800392c:	9303      	str	r3, [sp, #12]
 800392e:	9b02      	ldr	r3, [sp, #8]
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	f2c0 8099 	blt.w	8003a68 <__kernel_rem_pio2f+0x158>
 8003936:	1edc      	subs	r4, r3, #3
 8003938:	bf48      	it	mi
 800393a:	1d1c      	addmi	r4, r3, #4
 800393c:	10e4      	asrs	r4, r4, #3
 800393e:	2500      	movs	r5, #0
 8003940:	f04f 0b00 	mov.w	fp, #0
 8003944:	1c67      	adds	r7, r4, #1
 8003946:	00fb      	lsls	r3, r7, #3
 8003948:	9306      	str	r3, [sp, #24]
 800394a:	9b02      	ldr	r3, [sp, #8]
 800394c:	9a03      	ldr	r2, [sp, #12]
 800394e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8003952:	9b01      	ldr	r3, [sp, #4]
 8003954:	eba4 0802 	sub.w	r8, r4, r2
 8003958:	eb03 0902 	add.w	r9, r3, r2
 800395c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800395e:	ae1e      	add	r6, sp, #120	@ 0x78
 8003960:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003964:	454d      	cmp	r5, r9
 8003966:	f340 8081 	ble.w	8003a6c <__kernel_rem_pio2f+0x15c>
 800396a:	9a04      	ldr	r2, [sp, #16]
 800396c:	ab1e      	add	r3, sp, #120	@ 0x78
 800396e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003972:	f04f 0900 	mov.w	r9, #0
 8003976:	2300      	movs	r3, #0
 8003978:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800397c:	9a01      	ldr	r2, [sp, #4]
 800397e:	4591      	cmp	r9, r2
 8003980:	f340 809c 	ble.w	8003abc <__kernel_rem_pio2f+0x1ac>
 8003984:	4613      	mov	r3, r2
 8003986:	aa0a      	add	r2, sp, #40	@ 0x28
 8003988:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800398c:	9308      	str	r3, [sp, #32]
 800398e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8003990:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003994:	9c01      	ldr	r4, [sp, #4]
 8003996:	9307      	str	r3, [sp, #28]
 8003998:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800399c:	4646      	mov	r6, r8
 800399e:	4625      	mov	r5, r4
 80039a0:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 80039a4:	ab5a      	add	r3, sp, #360	@ 0x168
 80039a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80039aa:	f853 bc50 	ldr.w	fp, [r3, #-80]
 80039ae:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	f300 8087 	bgt.w	8003ac6 <__kernel_rem_pio2f+0x1b6>
 80039b8:	4639      	mov	r1, r7
 80039ba:	4658      	mov	r0, fp
 80039bc:	f000 fa48 	bl	8003e50 <scalbnf>
 80039c0:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80039c4:	4605      	mov	r5, r0
 80039c6:	f7fc fccf 	bl	8000368 <__aeabi_fmul>
 80039ca:	f000 fa8d 	bl	8003ee8 <floorf>
 80039ce:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80039d2:	f7fc fcc9 	bl	8000368 <__aeabi_fmul>
 80039d6:	4601      	mov	r1, r0
 80039d8:	4628      	mov	r0, r5
 80039da:	f7fc fbbb 	bl	8000154 <__aeabi_fsub>
 80039de:	4605      	mov	r5, r0
 80039e0:	f7fc fe88 	bl	80006f4 <__aeabi_f2iz>
 80039e4:	4606      	mov	r6, r0
 80039e6:	f7fc fc6b 	bl	80002c0 <__aeabi_i2f>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4628      	mov	r0, r5
 80039ee:	f7fc fbb1 	bl	8000154 <__aeabi_fsub>
 80039f2:	2f00      	cmp	r7, #0
 80039f4:	4681      	mov	r9, r0
 80039f6:	f340 8083 	ble.w	8003b00 <__kernel_rem_pio2f+0x1f0>
 80039fa:	1e62      	subs	r2, r4, #1
 80039fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80039fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003a02:	f1c7 0108 	rsb	r1, r7, #8
 8003a06:	fa45 f301 	asr.w	r3, r5, r1
 8003a0a:	441e      	add	r6, r3
 8003a0c:	408b      	lsls	r3, r1
 8003a0e:	1aed      	subs	r5, r5, r3
 8003a10:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003a16:	f1c7 0307 	rsb	r3, r7, #7
 8003a1a:	411d      	asrs	r5, r3
 8003a1c:	2d00      	cmp	r5, #0
 8003a1e:	dd7c      	ble.n	8003b1a <__kernel_rem_pio2f+0x20a>
 8003a20:	2200      	movs	r2, #0
 8003a22:	4692      	mov	sl, r2
 8003a24:	3601      	adds	r6, #1
 8003a26:	4294      	cmp	r4, r2
 8003a28:	f300 80ac 	bgt.w	8003b84 <__kernel_rem_pio2f+0x274>
 8003a2c:	2f00      	cmp	r7, #0
 8003a2e:	dd05      	ble.n	8003a3c <__kernel_rem_pio2f+0x12c>
 8003a30:	2f01      	cmp	r7, #1
 8003a32:	f000 80b8 	beq.w	8003ba6 <__kernel_rem_pio2f+0x296>
 8003a36:	2f02      	cmp	r7, #2
 8003a38:	f000 80bf 	beq.w	8003bba <__kernel_rem_pio2f+0x2aa>
 8003a3c:	2d02      	cmp	r5, #2
 8003a3e:	d16c      	bne.n	8003b1a <__kernel_rem_pio2f+0x20a>
 8003a40:	4649      	mov	r1, r9
 8003a42:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a46:	f7fc fb85 	bl	8000154 <__aeabi_fsub>
 8003a4a:	4681      	mov	r9, r0
 8003a4c:	f1ba 0f00 	cmp.w	sl, #0
 8003a50:	d063      	beq.n	8003b1a <__kernel_rem_pio2f+0x20a>
 8003a52:	4639      	mov	r1, r7
 8003a54:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a58:	f000 f9fa 	bl	8003e50 <scalbnf>
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	4648      	mov	r0, r9
 8003a60:	f7fc fb78 	bl	8000154 <__aeabi_fsub>
 8003a64:	4681      	mov	r9, r0
 8003a66:	e058      	b.n	8003b1a <__kernel_rem_pio2f+0x20a>
 8003a68:	2400      	movs	r4, #0
 8003a6a:	e768      	b.n	800393e <__kernel_rem_pio2f+0x2e>
 8003a6c:	eb18 0f05 	cmn.w	r8, r5
 8003a70:	d407      	bmi.n	8003a82 <__kernel_rem_pio2f+0x172>
 8003a72:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8003a76:	f7fc fc23 	bl	80002c0 <__aeabi_i2f>
 8003a7a:	f846 0b04 	str.w	r0, [r6], #4
 8003a7e:	3501      	adds	r5, #1
 8003a80:	e770      	b.n	8003964 <__kernel_rem_pio2f+0x54>
 8003a82:	4658      	mov	r0, fp
 8003a84:	e7f9      	b.n	8003a7a <__kernel_rem_pio2f+0x16a>
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	9b05      	ldr	r3, [sp, #20]
 8003a8a:	f8da 1000 	ldr.w	r1, [sl]
 8003a8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003a92:	f7fc fc69 	bl	8000368 <__aeabi_fmul>
 8003a96:	4601      	mov	r1, r0
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f7fc fb5d 	bl	8000158 <__addsf3>
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	9b07      	ldr	r3, [sp, #28]
 8003aa2:	f108 0801 	add.w	r8, r8, #1
 8003aa6:	9a03      	ldr	r2, [sp, #12]
 8003aa8:	f1aa 0a04 	sub.w	sl, sl, #4
 8003aac:	4590      	cmp	r8, r2
 8003aae:	ddea      	ble.n	8003a86 <__kernel_rem_pio2f+0x176>
 8003ab0:	f84b 6b04 	str.w	r6, [fp], #4
 8003ab4:	f109 0901 	add.w	r9, r9, #1
 8003ab8:	3504      	adds	r5, #4
 8003aba:	e75f      	b.n	800397c <__kernel_rem_pio2f+0x6c>
 8003abc:	46aa      	mov	sl, r5
 8003abe:	461e      	mov	r6, r3
 8003ac0:	f04f 0800 	mov.w	r8, #0
 8003ac4:	e7ef      	b.n	8003aa6 <__kernel_rem_pio2f+0x196>
 8003ac6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8003aca:	4658      	mov	r0, fp
 8003acc:	f7fc fc4c 	bl	8000368 <__aeabi_fmul>
 8003ad0:	f7fc fe10 	bl	80006f4 <__aeabi_f2iz>
 8003ad4:	f7fc fbf4 	bl	80002c0 <__aeabi_i2f>
 8003ad8:	4649      	mov	r1, r9
 8003ada:	9009      	str	r0, [sp, #36]	@ 0x24
 8003adc:	f7fc fc44 	bl	8000368 <__aeabi_fmul>
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	4658      	mov	r0, fp
 8003ae4:	f7fc fb36 	bl	8000154 <__aeabi_fsub>
 8003ae8:	f7fc fe04 	bl	80006f4 <__aeabi_f2iz>
 8003aec:	3d01      	subs	r5, #1
 8003aee:	f846 0b04 	str.w	r0, [r6], #4
 8003af2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8003af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003af8:	f7fc fb2e 	bl	8000158 <__addsf3>
 8003afc:	4683      	mov	fp, r0
 8003afe:	e758      	b.n	80039b2 <__kernel_rem_pio2f+0xa2>
 8003b00:	d105      	bne.n	8003b0e <__kernel_rem_pio2f+0x1fe>
 8003b02:	1e63      	subs	r3, r4, #1
 8003b04:	aa0a      	add	r2, sp, #40	@ 0x28
 8003b06:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003b0a:	11ed      	asrs	r5, r5, #7
 8003b0c:	e786      	b.n	8003a1c <__kernel_rem_pio2f+0x10c>
 8003b0e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b12:	f7fc fddb 	bl	80006cc <__aeabi_fcmpge>
 8003b16:	4605      	mov	r5, r0
 8003b18:	bb90      	cbnz	r0, 8003b80 <__kernel_rem_pio2f+0x270>
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4648      	mov	r0, r9
 8003b1e:	f7fc fdb7 	bl	8000690 <__aeabi_fcmpeq>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	f000 8090 	beq.w	8003c48 <__kernel_rem_pio2f+0x338>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	1e63      	subs	r3, r4, #1
 8003b2c:	9901      	ldr	r1, [sp, #4]
 8003b2e:	428b      	cmp	r3, r1
 8003b30:	da4a      	bge.n	8003bc8 <__kernel_rem_pio2f+0x2b8>
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d076      	beq.n	8003c24 <__kernel_rem_pio2f+0x314>
 8003b36:	3c01      	subs	r4, #1
 8003b38:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003b3e:	3f08      	subs	r7, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f8      	beq.n	8003b36 <__kernel_rem_pio2f+0x226>
 8003b44:	4639      	mov	r1, r7
 8003b46:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003b4a:	f000 f981 	bl	8003e50 <scalbnf>
 8003b4e:	46a2      	mov	sl, r4
 8003b50:	4607      	mov	r7, r0
 8003b52:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8003b56:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8003b5a:	f1ba 0f00 	cmp.w	sl, #0
 8003b5e:	f280 80a1 	bge.w	8003ca4 <__kernel_rem_pio2f+0x394>
 8003b62:	4627      	mov	r7, r4
 8003b64:	2200      	movs	r2, #0
 8003b66:	2f00      	cmp	r7, #0
 8003b68:	f2c0 80cb 	blt.w	8003d02 <__kernel_rem_pio2f+0x3f2>
 8003b6c:	a946      	add	r1, sp, #280	@ 0x118
 8003b6e:	4690      	mov	r8, r2
 8003b70:	f04f 0a00 	mov.w	sl, #0
 8003b74:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <__kernel_rem_pio2f+0x2c8>)
 8003b76:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8003b7a:	eba4 0907 	sub.w	r9, r4, r7
 8003b7e:	e0b4      	b.n	8003cea <__kernel_rem_pio2f+0x3da>
 8003b80:	2502      	movs	r5, #2
 8003b82:	e74d      	b.n	8003a20 <__kernel_rem_pio2f+0x110>
 8003b84:	f858 3b04 	ldr.w	r3, [r8], #4
 8003b88:	f1ba 0f00 	cmp.w	sl, #0
 8003b8c:	d108      	bne.n	8003ba0 <__kernel_rem_pio2f+0x290>
 8003b8e:	b123      	cbz	r3, 8003b9a <__kernel_rem_pio2f+0x28a>
 8003b90:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b94:	f848 3c04 	str.w	r3, [r8, #-4]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	469a      	mov	sl, r3
 8003b9c:	3201      	adds	r2, #1
 8003b9e:	e742      	b.n	8003a26 <__kernel_rem_pio2f+0x116>
 8003ba0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003ba4:	e7f6      	b.n	8003b94 <__kernel_rem_pio2f+0x284>
 8003ba6:	1e62      	subs	r2, r4, #1
 8003ba8:	ab0a      	add	r3, sp, #40	@ 0x28
 8003baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb2:	a90a      	add	r1, sp, #40	@ 0x28
 8003bb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003bb8:	e740      	b.n	8003a3c <__kernel_rem_pio2f+0x12c>
 8003bba:	1e62      	subs	r2, r4, #1
 8003bbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8003bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc6:	e7f4      	b.n	8003bb2 <__kernel_rem_pio2f+0x2a2>
 8003bc8:	a90a      	add	r1, sp, #40	@ 0x28
 8003bca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	e7ab      	b.n	8003b2c <__kernel_rem_pio2f+0x21c>
 8003bd4:	0800436c 	.word	0x0800436c
 8003bd8:	08004340 	.word	0x08004340
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d0fa      	beq.n	8003bdc <__kernel_rem_pio2f+0x2cc>
 8003be6:	9a04      	ldr	r2, [sp, #16]
 8003be8:	a91e      	add	r1, sp, #120	@ 0x78
 8003bea:	18a2      	adds	r2, r4, r2
 8003bec:	1c66      	adds	r6, r4, #1
 8003bee:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8003bf2:	441c      	add	r4, r3
 8003bf4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8003bf8:	42b4      	cmp	r4, r6
 8003bfa:	f6ff aecd 	blt.w	8003998 <__kernel_rem_pio2f+0x88>
 8003bfe:	9b07      	ldr	r3, [sp, #28]
 8003c00:	46ab      	mov	fp, r5
 8003c02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003c06:	f7fc fb5b 	bl	80002c0 <__aeabi_i2f>
 8003c0a:	f04f 0a00 	mov.w	sl, #0
 8003c0e:	f04f 0800 	mov.w	r8, #0
 8003c12:	6028      	str	r0, [r5, #0]
 8003c14:	9b03      	ldr	r3, [sp, #12]
 8003c16:	459a      	cmp	sl, r3
 8003c18:	dd07      	ble.n	8003c2a <__kernel_rem_pio2f+0x31a>
 8003c1a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8003c1e:	3504      	adds	r5, #4
 8003c20:	3601      	adds	r6, #1
 8003c22:	e7e9      	b.n	8003bf8 <__kernel_rem_pio2f+0x2e8>
 8003c24:	2301      	movs	r3, #1
 8003c26:	9a08      	ldr	r2, [sp, #32]
 8003c28:	e7d9      	b.n	8003bde <__kernel_rem_pio2f+0x2ce>
 8003c2a:	9b05      	ldr	r3, [sp, #20]
 8003c2c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8003c30:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8003c34:	f7fc fb98 	bl	8000368 <__aeabi_fmul>
 8003c38:	4601      	mov	r1, r0
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	f7fc fa8c 	bl	8000158 <__addsf3>
 8003c40:	f10a 0a01 	add.w	sl, sl, #1
 8003c44:	4680      	mov	r8, r0
 8003c46:	e7e5      	b.n	8003c14 <__kernel_rem_pio2f+0x304>
 8003c48:	9b06      	ldr	r3, [sp, #24]
 8003c4a:	9a02      	ldr	r2, [sp, #8]
 8003c4c:	4648      	mov	r0, r9
 8003c4e:	1a99      	subs	r1, r3, r2
 8003c50:	f000 f8fe 	bl	8003e50 <scalbnf>
 8003c54:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003c58:	4680      	mov	r8, r0
 8003c5a:	f7fc fd37 	bl	80006cc <__aeabi_fcmpge>
 8003c5e:	b1f8      	cbz	r0, 8003ca0 <__kernel_rem_pio2f+0x390>
 8003c60:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8003c64:	4640      	mov	r0, r8
 8003c66:	f7fc fb7f 	bl	8000368 <__aeabi_fmul>
 8003c6a:	f7fc fd43 	bl	80006f4 <__aeabi_f2iz>
 8003c6e:	f7fc fb27 	bl	80002c0 <__aeabi_i2f>
 8003c72:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003c76:	4681      	mov	r9, r0
 8003c78:	f7fc fb76 	bl	8000368 <__aeabi_fmul>
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f7fc fa68 	bl	8000154 <__aeabi_fsub>
 8003c84:	f7fc fd36 	bl	80006f4 <__aeabi_f2iz>
 8003c88:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003c8e:	4648      	mov	r0, r9
 8003c90:	3401      	adds	r4, #1
 8003c92:	3708      	adds	r7, #8
 8003c94:	f7fc fd2e 	bl	80006f4 <__aeabi_f2iz>
 8003c98:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003c9e:	e751      	b.n	8003b44 <__kernel_rem_pio2f+0x234>
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	e7f7      	b.n	8003c94 <__kernel_rem_pio2f+0x384>
 8003ca4:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ca6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003caa:	f7fc fb09 	bl	80002c0 <__aeabi_i2f>
 8003cae:	4639      	mov	r1, r7
 8003cb0:	f7fc fb5a 	bl	8000368 <__aeabi_fmul>
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7fc fb54 	bl	8000368 <__aeabi_fmul>
 8003cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	e748      	b.n	8003b5a <__kernel_rem_pio2f+0x24a>
 8003cc8:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ccc:	f85b 1b04 	ldr.w	r1, [fp], #4
 8003cd0:	9203      	str	r2, [sp, #12]
 8003cd2:	9302      	str	r3, [sp, #8]
 8003cd4:	f7fc fb48 	bl	8000368 <__aeabi_fmul>
 8003cd8:	4601      	mov	r1, r0
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7fc fa3c 	bl	8000158 <__addsf3>
 8003ce0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003ce4:	4680      	mov	r8, r0
 8003ce6:	f10a 0a01 	add.w	sl, sl, #1
 8003cea:	9901      	ldr	r1, [sp, #4]
 8003cec:	458a      	cmp	sl, r1
 8003cee:	dc01      	bgt.n	8003cf4 <__kernel_rem_pio2f+0x3e4>
 8003cf0:	45d1      	cmp	r9, sl
 8003cf2:	dae9      	bge.n	8003cc8 <__kernel_rem_pio2f+0x3b8>
 8003cf4:	ab5a      	add	r3, sp, #360	@ 0x168
 8003cf6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8003cfa:	f849 8ca0 	str.w	r8, [r9, #-160]
 8003cfe:	3f01      	subs	r7, #1
 8003d00:	e731      	b.n	8003b66 <__kernel_rem_pio2f+0x256>
 8003d02:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	dc07      	bgt.n	8003d18 <__kernel_rem_pio2f+0x408>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	dc4e      	bgt.n	8003daa <__kernel_rem_pio2f+0x49a>
 8003d0c:	d02e      	beq.n	8003d6c <__kernel_rem_pio2f+0x45c>
 8003d0e:	f006 0007 	and.w	r0, r6, #7
 8003d12:	b05b      	add	sp, #364	@ 0x16c
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d1f7      	bne.n	8003d0e <__kernel_rem_pio2f+0x3fe>
 8003d1e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8003d22:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8003d26:	46b8      	mov	r8, r7
 8003d28:	46a2      	mov	sl, r4
 8003d2a:	f1ba 0f00 	cmp.w	sl, #0
 8003d2e:	dc49      	bgt.n	8003dc4 <__kernel_rem_pio2f+0x4b4>
 8003d30:	46a1      	mov	r9, r4
 8003d32:	f1b9 0f01 	cmp.w	r9, #1
 8003d36:	dc60      	bgt.n	8003dfa <__kernel_rem_pio2f+0x4ea>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	2c01      	cmp	r4, #1
 8003d3c:	dc76      	bgt.n	8003e2c <__kernel_rem_pio2f+0x51c>
 8003d3e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8003d40:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	d178      	bne.n	8003e38 <__kernel_rem_pio2f+0x528>
 8003d46:	9900      	ldr	r1, [sp, #0]
 8003d48:	600a      	str	r2, [r1, #0]
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	6090      	str	r0, [r2, #8]
 8003d50:	e7dd      	b.n	8003d0e <__kernel_rem_pio2f+0x3fe>
 8003d52:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8003d56:	f7fc f9ff 	bl	8000158 <__addsf3>
 8003d5a:	3c01      	subs	r4, #1
 8003d5c:	2c00      	cmp	r4, #0
 8003d5e:	daf8      	bge.n	8003d52 <__kernel_rem_pio2f+0x442>
 8003d60:	b10d      	cbz	r5, 8003d66 <__kernel_rem_pio2f+0x456>
 8003d62:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003d66:	9b00      	ldr	r3, [sp, #0]
 8003d68:	6018      	str	r0, [r3, #0]
 8003d6a:	e7d0      	b.n	8003d0e <__kernel_rem_pio2f+0x3fe>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	af32      	add	r7, sp, #200	@ 0xc8
 8003d70:	e7f4      	b.n	8003d5c <__kernel_rem_pio2f+0x44c>
 8003d72:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8003d76:	f7fc f9ef 	bl	8000158 <__addsf3>
 8003d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d7e:	f1b8 0f00 	cmp.w	r8, #0
 8003d82:	daf6      	bge.n	8003d72 <__kernel_rem_pio2f+0x462>
 8003d84:	b1ad      	cbz	r5, 8003db2 <__kernel_rem_pio2f+0x4a2>
 8003d86:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8003d8a:	9a00      	ldr	r2, [sp, #0]
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8003d92:	f7fc f9df 	bl	8000154 <__aeabi_fsub>
 8003d96:	f04f 0801 	mov.w	r8, #1
 8003d9a:	4544      	cmp	r4, r8
 8003d9c:	da0b      	bge.n	8003db6 <__kernel_rem_pio2f+0x4a6>
 8003d9e:	b10d      	cbz	r5, 8003da4 <__kernel_rem_pio2f+0x494>
 8003da0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003da4:	9b00      	ldr	r3, [sp, #0]
 8003da6:	6058      	str	r0, [r3, #4]
 8003da8:	e7b1      	b.n	8003d0e <__kernel_rem_pio2f+0x3fe>
 8003daa:	46a0      	mov	r8, r4
 8003dac:	2000      	movs	r0, #0
 8003dae:	af32      	add	r7, sp, #200	@ 0xc8
 8003db0:	e7e5      	b.n	8003d7e <__kernel_rem_pio2f+0x46e>
 8003db2:	4603      	mov	r3, r0
 8003db4:	e7e9      	b.n	8003d8a <__kernel_rem_pio2f+0x47a>
 8003db6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003dba:	f7fc f9cd 	bl	8000158 <__addsf3>
 8003dbe:	f108 0801 	add.w	r8, r8, #1
 8003dc2:	e7ea      	b.n	8003d9a <__kernel_rem_pio2f+0x48a>
 8003dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	9201      	str	r2, [sp, #4]
 8003dd4:	f7fc f9c0 	bl	8000158 <__addsf3>
 8003dd8:	9a01      	ldr	r2, [sp, #4]
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4681      	mov	r9, r0
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fc f9b8 	bl	8000154 <__aeabi_fsub>
 8003de4:	9b02      	ldr	r3, [sp, #8]
 8003de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fc f9b4 	bl	8000158 <__addsf3>
 8003df0:	f848 0904 	str.w	r0, [r8], #-4
 8003df4:	f8c8 9000 	str.w	r9, [r8]
 8003df8:	e797      	b.n	8003d2a <__kernel_rem_pio2f+0x41a>
 8003dfa:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8003dfe:	f8d7 a000 	ldr.w	sl, [r7]
 8003e02:	4618      	mov	r0, r3
 8003e04:	4651      	mov	r1, sl
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	f7fc f9a6 	bl	8000158 <__addsf3>
 8003e0c:	9b01      	ldr	r3, [sp, #4]
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4680      	mov	r8, r0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc f99e 	bl	8000154 <__aeabi_fsub>
 8003e18:	4651      	mov	r1, sl
 8003e1a:	f7fc f99d 	bl	8000158 <__addsf3>
 8003e1e:	f847 0904 	str.w	r0, [r7], #-4
 8003e22:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e26:	f8c7 8000 	str.w	r8, [r7]
 8003e2a:	e782      	b.n	8003d32 <__kernel_rem_pio2f+0x422>
 8003e2c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8003e30:	f7fc f992 	bl	8000158 <__addsf3>
 8003e34:	3c01      	subs	r4, #1
 8003e36:	e780      	b.n	8003d3a <__kernel_rem_pio2f+0x42a>
 8003e38:	9900      	ldr	r1, [sp, #0]
 8003e3a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8003e3e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	600a      	str	r2, [r1, #0]
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	460a      	mov	r2, r1
 8003e48:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003e4c:	e77f      	b.n	8003d4e <__kernel_rem_pio2f+0x43e>
 8003e4e:	bf00      	nop

08003e50 <scalbnf>:
 8003e50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4603      	mov	r3, r0
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	d02e      	beq.n	8003ebc <scalbnf+0x6c>
 8003e5e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003e62:	d304      	bcc.n	8003e6e <scalbnf+0x1e>
 8003e64:	4601      	mov	r1, r0
 8003e66:	f7fc f977 	bl	8000158 <__addsf3>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	e026      	b.n	8003ebc <scalbnf+0x6c>
 8003e6e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8003e72:	d118      	bne.n	8003ea6 <scalbnf+0x56>
 8003e74:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8003e78:	f7fc fa76 	bl	8000368 <__aeabi_fmul>
 8003e7c:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <scalbnf+0x8c>)
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4295      	cmp	r5, r2
 8003e82:	db0c      	blt.n	8003e9e <scalbnf+0x4e>
 8003e84:	4604      	mov	r4, r0
 8003e86:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8003e8a:	3a19      	subs	r2, #25
 8003e8c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003e90:	428d      	cmp	r5, r1
 8003e92:	dd0a      	ble.n	8003eaa <scalbnf+0x5a>
 8003e94:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <scalbnf+0x90>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f361 001e 	bfi	r0, r1, #0, #31
 8003e9c:	e000      	b.n	8003ea0 <scalbnf+0x50>
 8003e9e:	4911      	ldr	r1, [pc, #68]	@ (8003ee4 <scalbnf+0x94>)
 8003ea0:	f7fc fa62 	bl	8000368 <__aeabi_fmul>
 8003ea4:	e7e1      	b.n	8003e6a <scalbnf+0x1a>
 8003ea6:	0dd2      	lsrs	r2, r2, #23
 8003ea8:	e7f0      	b.n	8003e8c <scalbnf+0x3c>
 8003eaa:	1951      	adds	r1, r2, r5
 8003eac:	29fe      	cmp	r1, #254	@ 0xfe
 8003eae:	dcf1      	bgt.n	8003e94 <scalbnf+0x44>
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	dd05      	ble.n	8003ec0 <scalbnf+0x70>
 8003eb4:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8003eb8:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	f111 0f16 	cmn.w	r1, #22
 8003ec4:	da01      	bge.n	8003eca <scalbnf+0x7a>
 8003ec6:	4907      	ldr	r1, [pc, #28]	@ (8003ee4 <scalbnf+0x94>)
 8003ec8:	e7e5      	b.n	8003e96 <scalbnf+0x46>
 8003eca:	f101 0019 	add.w	r0, r1, #25
 8003ece:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8003ed2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8003ed6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8003eda:	e7e1      	b.n	8003ea0 <scalbnf+0x50>
 8003edc:	ffff3cb0 	.word	0xffff3cb0
 8003ee0:	7149f2ca 	.word	0x7149f2ca
 8003ee4:	0da24260 	.word	0x0da24260

08003ee8 <floorf>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8003eee:	3d7f      	subs	r5, #127	@ 0x7f
 8003ef0:	2d16      	cmp	r5, #22
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8003efa:	dc26      	bgt.n	8003f4a <floorf+0x62>
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	da0f      	bge.n	8003f20 <floorf+0x38>
 8003f00:	4917      	ldr	r1, [pc, #92]	@ (8003f60 <floorf+0x78>)
 8003f02:	f7fc f929 	bl	8000158 <__addsf3>
 8003f06:	2100      	movs	r1, #0
 8003f08:	f7fc fbea 	bl	80006e0 <__aeabi_fcmpgt>
 8003f0c:	b130      	cbz	r0, 8003f1c <floorf+0x34>
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	da23      	bge.n	8003f5a <floorf+0x72>
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	4c13      	ldr	r4, [pc, #76]	@ (8003f64 <floorf+0x7c>)
 8003f16:	bf08      	it	eq
 8003f18:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	e01a      	b.n	8003f56 <floorf+0x6e>
 8003f20:	4e11      	ldr	r6, [pc, #68]	@ (8003f68 <floorf+0x80>)
 8003f22:	412e      	asrs	r6, r5
 8003f24:	4230      	tst	r0, r6
 8003f26:	d016      	beq.n	8003f56 <floorf+0x6e>
 8003f28:	490d      	ldr	r1, [pc, #52]	@ (8003f60 <floorf+0x78>)
 8003f2a:	f7fc f915 	bl	8000158 <__addsf3>
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f7fc fbd6 	bl	80006e0 <__aeabi_fcmpgt>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d0f1      	beq.n	8003f1c <floorf+0x34>
 8003f38:	2c00      	cmp	r4, #0
 8003f3a:	bfbe      	ittt	lt
 8003f3c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8003f40:	412b      	asrlt	r3, r5
 8003f42:	18e4      	addlt	r4, r4, r3
 8003f44:	ea24 0406 	bic.w	r4, r4, r6
 8003f48:	e7e8      	b.n	8003f1c <floorf+0x34>
 8003f4a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8003f4e:	d302      	bcc.n	8003f56 <floorf+0x6e>
 8003f50:	f7fc f902 	bl	8000158 <__addsf3>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4608      	mov	r0, r1
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	e7de      	b.n	8003f1c <floorf+0x34>
 8003f5e:	bf00      	nop
 8003f60:	7149f2ca 	.word	0x7149f2ca
 8003f64:	bf800000 	.word	0xbf800000
 8003f68:	007fffff 	.word	0x007fffff

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
